{"version":3,"file":"select.component.d.ts","sources":["select.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { SelectDropdownOption } from './select-dropdown-option.interface';\nimport { SelectInputComponent } from './select-input.component';\nimport { SelectOptionDirective } from './select-option.directive';\ndeclare const _InputMixinBase: any;\nexport declare class SelectComponent extends _InputMixinBase implements ControlValueAccessor, OnDestroy {\n    private readonly _element;\n    private readonly _renderer;\n    private readonly _cdr;\n    id: string;\n    name: string;\n    label: string;\n    hint: string;\n    placeholder: string;\n    emptyPlaceholder: string;\n    filterEmptyPlaceholder: string;\n    filterPlaceholder: string;\n    allowAdditionsText: string;\n    groupBy: string;\n    selectCaret: string;\n    requiredIndicator: string | boolean;\n    options: SelectDropdownOption[];\n    identifier: string;\n    get minSelections(): number;\n    set minSelections(minSelections: number);\n    get autosizeMinWidth(): number | string;\n    set autosizeMinWidth(autosizeMinWidth: number | string);\n    get maxSelections(): number;\n    set maxSelections(maxSelections: number);\n    get autofocus(): boolean;\n    set autofocus(autofocus: boolean);\n    get autosize(): boolean;\n    set autosize(autosize: boolean);\n    get allowClear(): boolean;\n    set allowClear(allowClear: boolean);\n    get allowAdditions(): boolean;\n    set allowAdditions(allowAdditions: boolean);\n    get disableDropdown(): boolean;\n    set disableDropdown(disableDropdown: boolean);\n    get closeOnSelect(): boolean;\n    set closeOnSelect(closeOnSelect: boolean);\n    get closeOnBodyClick(): boolean;\n    set closeOnBodyClick(closeOnBodyClick: boolean);\n    get filterable(): boolean;\n    set filterable(filterable: boolean);\n    get required(): boolean;\n    set required(required: boolean);\n    get filterCaseSensitive(): boolean;\n    set filterCaseSensitive(filterCaseSensitive: boolean);\n    get tagging(): boolean;\n    set tagging(tagging: boolean);\n    get multiple(): boolean;\n    set multiple(multiple: boolean);\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    change: EventEmitter<any[]>;\n    keyup: EventEmitter<{\n        event: KeyboardEvent;\n        value?: string;\n    }>;\n    toggle: EventEmitter<boolean>;\n    readonly inputComponent: SelectInputComponent;\n    /**\n     * Custom Template for groupBy\n     * Only works with groupBy on\n     *\n     * TemplateContext:\n     * - groupName: the name of the group (`option.value[this.groupBy]` is the value)\n     * - index, first, last, odd, even (ngFor properties)\n     */\n    groupByTemplate: TemplateRef<unknown>;\n    get optionTemplates(): QueryList<SelectOptionDirective>;\n    set optionTemplates(val: QueryList<SelectOptionDirective>);\n    get invalid(): boolean;\n    get requiredIndicatorView(): string;\n    get isSingleSelect(): boolean;\n    get hasSelections(): boolean;\n    get hasPlaceholder(): boolean;\n    get value(): any[];\n    set value(val: any[]);\n    get dropdownVisible(): boolean;\n    toggleListener?: () => void;\n    filterQuery: string;\n    focusIndex: number;\n    dropdownActive: boolean;\n    touched: boolean;\n    private _optionTemplates;\n    private _value;\n    private _minSelections?;\n    private _maxSelections?;\n    private _autofocus;\n    private _autosize;\n    private _allowClear;\n    private _allowAdditions;\n    private _disableDropdown;\n    private _closeOnSelect;\n    private _closeOnBodyClick;\n    private _filterable;\n    private _required;\n    private _filterCaseSensitive;\n    private _tagging;\n    private _multiple;\n    private _disabled;\n    private _autosizeMinWidth;\n    constructor(_element: ElementRef, _renderer: Renderer2, _cdr: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    onDropdownSelection(selection: SelectDropdownOption): void;\n    onInputSelection(selections: any[]): void;\n    onFocus(): void;\n    onClear(): void;\n    onBodyClick(event: Event): void;\n    onClose(): void;\n    onToggle(): void;\n    toggleDropdown(state: boolean): void;\n    onKeyUp({ event, value }: {\n        event: KeyboardEvent;\n        value?: string;\n    }): void;\n    writeValue(val: any[]): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    private checkInvalidValue;\n    private onChangeCallback;\n    private onTouchedCallback;\n}\nexport {};\n"]}