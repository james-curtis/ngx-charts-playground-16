{"version":3,"file":"calendar.component.d.ts","sources":["calendar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, ChangeDetectorRef, AfterViewInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport moment from 'moment-timezone';\nimport { CalendarDay } from './calendar-day.interface';\nimport { CalendarMonth } from './calendar-month.type';\nimport { CalendarView } from './calendar-view.enum';\nexport declare class CalendarComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n    private readonly cdr;\n    minDate: Date | string;\n    disabled: boolean;\n    maxDate: Date | string;\n    daysOfWeek: string[];\n    timezone: string;\n    inputFormats: Array<string | moment.MomentBuiltinFormat>;\n    get minView(): CalendarView;\n    set minView(val: CalendarView);\n    get defaultView(): CalendarView;\n    set defaultView(val: CalendarView);\n    change: EventEmitter<Date>;\n    get value(): Date;\n    set value(val: Date);\n    get current(): moment.Moment;\n    activeDate: moment.Moment;\n    weeks: CalendarMonth;\n    currentView: CalendarView;\n    monthsList: string[];\n    startYear: number;\n    private _value;\n    private _current;\n    private _minView;\n    private _defaultView;\n    constructor(cdr: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    changeViews(): void;\n    validateView(): void;\n    /**\n     * Checks if `date` matches selected value\n     */\n    isDayActive(date: moment.Moment): boolean;\n    /**\n     * Checks if `month` matches selected value, in the viewed year\n     */\n    isMonthActive(month: string): boolean;\n    /**\n     * Checks if `month` and year matches current\n     */\n    isCurrentMonth(month: string): boolean;\n    /**\n     * Checks if `year` matches selected year\n     */\n    isYearActive(year: number): boolean;\n    /**\n     * Checks if year matches current year\n     */\n    isCurrentYear(year: number): boolean;\n    isDisabled(value: any, type: string): boolean;\n    onDayClick(day: CalendarDay): void;\n    onMonthClick(month: string): void;\n    onYearClick(year: number): void;\n    prevMonth(): void;\n    nextMonth(): void;\n    prevYear(): void;\n    nextYear(): void;\n    prevTwoDecades(): void;\n    nextTwoDecades(): void;\n    writeValue(val: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    onTouchedCallback: () => void;\n    private onChangeCallback;\n    private parseDate;\n    private createMoment;\n}\n"]}