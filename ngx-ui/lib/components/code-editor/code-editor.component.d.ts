import { OnInit, Renderer2, EventEmitter, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import CodeMirror from 'codemirror';
import 'codemirror/mode/yaml/yaml.js';
import 'codemirror/mode/python/python.js';
import 'codemirror/mode/powershell/powershell.js';
import 'codemirror/mode/javascript/javascript.js';
import 'codemirror/mode/htmlmixed/htmlmixed.js';
import 'codemirror/mode/spreadsheet/spreadsheet.js';
import 'codemirror/mode/handlebars/handlebars.js';
import './mustache';
import 'codemirror/addon/lint/lint.js';
import 'codemirror/addon/search/search.js';
import 'codemirror/addon/search/searchcursor.js';
import 'codemirror/addon/search/jump-to-line.js';
import 'codemirror/addon/dialog/dialog.js';
import 'codemirror/addon/fold/foldcode.js';
import 'codemirror/addon/fold/foldgutter.js';
import 'codemirror/addon/fold/indent-fold.js';
import 'codemirror/addon/hint/show-hint.js';
import 'codemirror/addon/mode/overlay.js';
import { HintCompletion } from './hint-completion.interface';
import * as ɵngcc0 from '@angular/core';
export declare class CodeEditorComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private readonly renderer;
    config: any;
    theme: string;
    readOnly: string | boolean;
    allowDropFileTypes: string[];
    gutters: Array<string | {
        className: string;
        style?: string;
    }>;
    mode?: any;
    lint?: any;
    autocompleteTokens?: Array<string | HintCompletion>;
    get autofocus(): boolean;
    set autofocus(autofocus: boolean);
    get lineNumbers(): boolean;
    set lineNumbers(lineNumbers: boolean);
    change: EventEmitter<any>;
    blur: EventEmitter<any>;
    host: any;
    content: any;
    instance: CodeMirror.EditorFromTextArea;
    _value: string;
    get value(): string;
    set value(val: string);
    private _autofocus;
    private _lineNumbers;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    cleanCode(code: string): string;
    onVisible(): void;
    onKeyUp(cm: CodeMirror.EditorFromTextArea, event: KeyboardEvent): void;
    onChange(): void;
    onBlur(): void;
    updateValue(value: string): void;
    writeValue(val: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private onTouchedCallback;
    private onChangeCallback;
    private autocomplete;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<CodeEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<CodeEditorComponent, "ngx-codemirror", ["ngxCodemirror"], { "config": "config"; "theme": "theme"; "readOnly": "readOnly"; "allowDropFileTypes": "allowDropFileTypes"; "gutters": "gutters"; "autofocus": "autofocus"; "lineNumbers": "lineNumbers"; "mode": "mode"; "lint": "lint"; "autocompleteTokens": "autocompleteTokens"; }, { "change": "change"; "blur": "blur"; }, never, ["*"]>;
}

//# sourceMappingURL=code-editor.component.d.ts.map