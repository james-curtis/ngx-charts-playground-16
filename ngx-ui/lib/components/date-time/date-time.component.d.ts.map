{"version":3,"file":"date-time.component.d.ts","sources":["date-time.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, OnDestroy, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport moment from 'moment-timezone';\nimport { DialogService } from '../dialog/dialog.service';\nimport { Datelike } from './date-like.type';\nimport { InputComponent } from '../input/input.component';\nimport { Size } from '../../mixins/size/size.enum';\nimport { Appearance } from '../../mixins/appearance/appearance.enum';\nexport declare class DateTimeComponent implements OnDestroy, ControlValueAccessor {\n    private readonly dialogService;\n    private readonly cdr;\n    id: string;\n    name: string;\n    label: string;\n    hint: string;\n    placeholder: string;\n    size: Size;\n    appearance: Appearance;\n    withMargin: boolean;\n    precision: moment.unitOfTime.StartOf;\n    timezone: string;\n    inputFormats: any[];\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    get minWidth(): number;\n    set minWidth(minWidth: number);\n    get tabindex(): number;\n    set tabindex(tabindex: number);\n    get autofocus(): boolean;\n    set autofocus(autofocus: boolean);\n    get inputType(): string;\n    set inputType(val: string);\n    get format(): string;\n    set format(val: string);\n    requiredIndicator: string | boolean;\n    get required(): boolean;\n    set required(required: boolean);\n    get value(): Date | string;\n    set value(val: Date | string);\n    get displayValue(): string;\n    set displayValue(value: string);\n    get autosize(): boolean;\n    set autosize(v: boolean);\n    get minDate(): Date | string;\n    set minDate(val: Date | string);\n    get maxDate(): Date | string;\n    set maxDate(val: Date | string);\n    /**\n     * this output will emit only when the input value is valid or cleared.\n     * @see inputChange for always emitting the value\n     */\n    change: EventEmitter<string | Date>;\n    blur: EventEmitter<Event>;\n    dateTimeSelected: EventEmitter<string | Date>;\n    /**\n     * this output will emit anytime the value changes regardless of validity.\n     * @see change when only emitting\n     */\n    inputChange: EventEmitter<string | Date>;\n    readonly calendarTpl: TemplateRef<ElementRef>;\n    readonly input: InputComponent;\n    errorMsg: string;\n    dialog: any;\n    dialogModel: moment.Moment;\n    hour: number;\n    minute: string;\n    amPmVal: string;\n    modes: string[];\n    private _value;\n    private _displayValue;\n    private _format;\n    private _inputType;\n    private _disabled;\n    private _autofocus;\n    private _tabindex;\n    private _autosize;\n    private _minWidth;\n    private _required;\n    private _maxDate;\n    private _minDate;\n    constructor(dialogService: DialogService, cdr: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    writeValue(val: any): void;\n    onBlur(event?: Event): void;\n    open(): void;\n    apply(): void;\n    setDialogDate(date: Datelike): void;\n    minuteChanged(newVal: number): void;\n    hourChanged(newVal: number): void;\n    selectCurrent(): void;\n    isCurrent(): boolean;\n    clear(): void;\n    onAmPmChange(newVal: string): void;\n    getDayDisabled(date: moment.Moment): boolean;\n    isTimeDisabled(mode: moment.unitOfTime.StartOf): boolean;\n    inputChanged(val: string): void;\n    close(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    private roundTo;\n    private validate;\n    private onTouchedCallback;\n    private onChangeCallback;\n    private getDisplayValue;\n    private parseDate;\n    private createMoment;\n}\n"]}