{"version":3,"file":"object-node.component.d.ts","sources":["object-node.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { JsonSchemaDataType, JSONEditorSchema, PropertyIndex } from '../json-editor.helper';\nexport declare class ObjectNode implements OnInit, OnChanges {\n    protected cdr: ChangeDetectorRef;\n    schema: JSONEditorSchema;\n    model: any;\n    required: boolean;\n    expanded: boolean;\n    path: string;\n    errors: any[];\n    typeCheckOverrides?: any;\n    schemaBuilderMode: boolean;\n    schemaRef: JSONEditorSchema;\n    showKnownProperties: boolean;\n    modelChange: EventEmitter<any>;\n    schemaUpdate: EventEmitter<JSONEditorSchema>;\n    requiredCache: {\n        [key: string]: boolean;\n    };\n    initialized: boolean;\n    dataTypes: JsonSchemaDataType[];\n    propertyCounter: number;\n    propertyId: number;\n    propertyIndex: PropertyIndex;\n    duplicatedFields: Map<string, string>;\n    dataTypeMap: Record<string, any>;\n    constructor(cdr: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    /**\n     * Updates a property on the model and emits the change event\n     *\n     * @param propName\n     * @param value\n     */\n    updateProp(id: number | string, value: any): void;\n    /**\n     * Updates the name of a property\n     *\n     * @param id\n     * @param name\n     */\n    updatePropertyName(id: number | string, name: string): void;\n    /**\n     * Adds a new property to the model\n     */\n    addProperty(dataType: JsonSchemaDataType): void;\n    /**\n     * Adds a new property as defined in the schema\n     */\n    addSchemaProperty(propName: string): void;\n    /**\n     * Adds a new patternProperty as defined in the schema\n     */\n    addSchemaPatternProperty(propName: string): void;\n    /**\n     * Deletes a property\n     */\n    deleteProperty(propName: string): void;\n    /**\n     * Returns the absolute tree path of the property\n     */\n    getPath(propName: string): string;\n    /**\n     * Updates the required cache\n     */\n    updateRequiredCache(): void;\n    /**\n     * Creates an index out of all the properties in the model\n     */\n    indexProperties(): void;\n    isIndexed(propertyName: string): boolean;\n    /**\n     * Inits the required properties on the model\n     */\n    addRequiredProperties(): void;\n    /**\n     *\n     * @param property\n     * @param type\n     */\n    changePropertyType(property: JSONEditorSchema, type: string): void;\n    /**\n     * Track By function for the array ittierator\n     *\n     * @param index\n     * @param value\n     */\n    trackBy(_: any, value: any): any;\n    /**\n     * Updates the icons in the schemas\n     */\n    protected updateIcons(): void;\n}\n"]}