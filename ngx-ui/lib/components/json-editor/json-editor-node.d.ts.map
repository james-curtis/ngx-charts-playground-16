{"version":3,"file":"json-editor-node.d.ts","sources":["json-editor-node.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit, OnChanges, SimpleChanges, TemplateRef, ComponentRef } from '@angular/core';\nimport { JSONEditorSchema } from './json-editor.helper';\nimport { DialogComponent } from '../dialog/dialog.component';\nimport { DialogService } from '../dialog/dialog.service';\nexport declare class JsonEditorNode implements OnInit, OnChanges {\n    dialogMngr: DialogService;\n    schema: JSONEditorSchema;\n    model: any;\n    required: boolean;\n    inline: boolean;\n    path: string;\n    errors: any[];\n    typeCheckOverrides?: any;\n    showKnownProperties: boolean;\n    modelChange: EventEmitter<any>;\n    schemaUpdate: EventEmitter<JSONEditorSchema>;\n    codeEditorTpl: TemplateRef<any>;\n    requiredCache: any;\n    expanded: boolean;\n    ownErrors: any[];\n    valid: boolean;\n    childrenErrors: any[];\n    childrenValid: boolean;\n    editorDialog: ComponentRef<DialogComponent>;\n    editorConfig: {\n        lineNumbers: boolean;\n        theme: string;\n        mode: {\n            label: string;\n            name: string;\n            json: boolean;\n        };\n    };\n    editorModel: string;\n    editorVisible: boolean;\n    editorModes: any[];\n    constructor(dialogMngr: DialogService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Inits the model if it is not defined\n     */\n    initModel(): void;\n    /**\n     * Process the errors input to figure out whether it or any of its children are invalid\n     */\n    processErrors(): void;\n    /**\n     * Updates the whole model and emits the change event\n     *\n     * @param value\n     */\n    updateModel(value: any): void;\n    /**\n     * Expand click event\n     */\n    onExpandClick(): void;\n    /**\n     * Opens the code editor dialog\n     */\n    openCodeEditor(): void;\n    /**\n     * Closes the code editor dialog\n     */\n    closeCodeEditor(): void;\n    /**\n     * Sets the editor mode and refreshes the editor\n     */\n    selectEditorMode(modeName: string): void;\n}\n"]}