import { AfterViewInit, OnDestroy, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor, Validator, NgModel, FormControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { Appearance } from '../../mixins/appearance/appearance.enum';
import { InputTypes } from './input-types.enum';
import { Size } from '../../mixins/size/size.enum';
import * as ɵngcc0 from '@angular/core';
export declare class InputComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, Validator {
    private readonly cdr;
    id: string;
    name: string;
    label: string;
    hint: string;
    placeholder: string;
    tabindex: number;
    min: number;
    max: number;
    minlength: number;
    maxlength: number;
    size: Size;
    appearance: Appearance;
    withMargin: boolean;
    get disabled(): boolean;
    set disabled(disabled: boolean);
    get minWidth(): number;
    set minWidth(minWidth: number);
    requiredIndicator: string | boolean;
    get required(): boolean;
    set required(required: boolean);
    passwordToggleEnabled: boolean;
    get passwordTextVisible(): boolean;
    set passwordTextVisible(p: boolean);
    get autoSelect(): boolean;
    set autoSelect(autoSelect: boolean);
    get autofocus(): boolean;
    set autofocus(autofocus: boolean);
    get autocomplete(): boolean;
    set autocomplete(autocomplete: boolean);
    get autocorrect(): boolean;
    set autocorrect(autocorrect: boolean);
    get spellcheck(): boolean;
    set spellcheck(spellcheck: boolean);
    get type(): InputTypes;
    set type(type: InputTypes);
    get autosize(): boolean;
    set autosize(v: boolean);
    get unlockable(): boolean;
    set unlockable(v: boolean);
    unlockableTooltip: string;
    change: EventEmitter<string | number>;
    blur: EventEmitter<Event>;
    focus: EventEmitter<FocusEvent>;
    keyup: EventEmitter<KeyboardEvent>;
    click: EventEmitter<Event>;
    select: EventEmitter<FocusEvent>;
    readonly inputControl: ElementRef<HTMLInputElement>;
    readonly inputModel: NgModel;
    readonly textareaControl: ElementRef<HTMLTextAreaElement>;
    get value(): string | number;
    set value(val: string | number);
    get focusedOrDirty(): any;
    get isTouched(): boolean;
    get labelState(): string;
    get underlineState(): string;
    get element(): ElementRef<HTMLInputElement> | ElementRef<HTMLTextAreaElement>;
    focused: boolean;
    readonly type$: BehaviorSubject<InputTypes>;
    readonly inputTypes: typeof InputTypes;
    private _value;
    private _type;
    private _passwordTextVisible;
    private _disabled;
    private _required;
    private _autoSelect;
    private _autofocus;
    private _autocomplete;
    private _autocorrect;
    private _spellcheck;
    private _autosize;
    private _spinnerInterval;
    private _spinnerTimeout;
    private _minWidth;
    private _unlockable;
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onChange(event: Event): void;
    onKeyUp(event: KeyboardEvent): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: Event): void;
    validate(c: FormControl): {
        [x: string]: any;
    };
    writeValue(val: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    togglePassword(): void;
    setDisabledState(isDisabled: boolean): void;
    incrementValue(event: MouseEvent): void;
    decrementValue(event: MouseEvent): void;
    clearSpinnerInterval(): void;
    private onTouchedCallback;
    private onChangeCallback;
    private updateInputType;
    private increment;
    private decrement;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<InputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<InputComponent, "ngx-input", ["ngxInput"], { "id": "id"; "label": "label"; "placeholder": "placeholder"; "size": "size"; "appearance": "appearance"; "withMargin": "withMargin"; "requiredIndicator": "requiredIndicator"; "passwordToggleEnabled": "passwordToggleEnabled"; "unlockableTooltip": "unlockableTooltip"; "disabled": "disabled"; "minWidth": "minWidth"; "required": "required"; "passwordTextVisible": "passwordTextVisible"; "autoSelect": "autoSelect"; "autofocus": "autofocus"; "autocomplete": "autocomplete"; "autocorrect": "autocorrect"; "spellcheck": "spellcheck"; "type": "type"; "autosize": "autosize"; "unlockable": "unlockable"; "name": "name"; "hint": "hint"; "tabindex": "tabindex"; "min": "min"; "max": "max"; "minlength": "minlength"; "maxlength": "maxlength"; }, { "change": "change"; "blur": "blur"; "focus": "focus"; "keyup": "keyup"; "click": "click"; "select": "select"; }, never, ["ngx-input-prefix", "ngx-input-suffix", "ngx-input-hint"]>;
}

//# sourceMappingURL=input.component.d.ts.map