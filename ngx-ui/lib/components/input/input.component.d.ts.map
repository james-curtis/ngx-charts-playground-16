{"version":3,"file":"input.component.d.ts","sources":["input.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, OnDestroy, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, Validator, NgModel, FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { Appearance } from '../../mixins/appearance/appearance.enum';\nimport { InputTypes } from './input-types.enum';\nimport { Size } from '../../mixins/size/size.enum';\nexport declare class InputComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, Validator {\n    private readonly cdr;\n    id: string;\n    name: string;\n    label: string;\n    hint: string;\n    placeholder: string;\n    tabindex: number;\n    min: number;\n    max: number;\n    minlength: number;\n    maxlength: number;\n    size: Size;\n    appearance: Appearance;\n    withMargin: boolean;\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    get minWidth(): number;\n    set minWidth(minWidth: number);\n    requiredIndicator: string | boolean;\n    get required(): boolean;\n    set required(required: boolean);\n    passwordToggleEnabled: boolean;\n    get passwordTextVisible(): boolean;\n    set passwordTextVisible(p: boolean);\n    get autoSelect(): boolean;\n    set autoSelect(autoSelect: boolean);\n    get autofocus(): boolean;\n    set autofocus(autofocus: boolean);\n    get autocomplete(): boolean;\n    set autocomplete(autocomplete: boolean);\n    get autocorrect(): boolean;\n    set autocorrect(autocorrect: boolean);\n    get spellcheck(): boolean;\n    set spellcheck(spellcheck: boolean);\n    get type(): InputTypes;\n    set type(type: InputTypes);\n    get autosize(): boolean;\n    set autosize(v: boolean);\n    get unlockable(): boolean;\n    set unlockable(v: boolean);\n    unlockableTooltip: string;\n    change: EventEmitter<string | number>;\n    blur: EventEmitter<Event>;\n    focus: EventEmitter<FocusEvent>;\n    keyup: EventEmitter<KeyboardEvent>;\n    click: EventEmitter<Event>;\n    select: EventEmitter<FocusEvent>;\n    readonly inputControl: ElementRef<HTMLInputElement>;\n    readonly inputModel: NgModel;\n    readonly textareaControl: ElementRef<HTMLTextAreaElement>;\n    get value(): string | number;\n    set value(val: string | number);\n    get focusedOrDirty(): any;\n    get isTouched(): boolean;\n    get labelState(): string;\n    get underlineState(): string;\n    get element(): ElementRef<HTMLInputElement> | ElementRef<HTMLTextAreaElement>;\n    focused: boolean;\n    readonly type$: BehaviorSubject<InputTypes>;\n    readonly inputTypes: typeof InputTypes;\n    private _value;\n    private _type;\n    private _passwordTextVisible;\n    private _disabled;\n    private _required;\n    private _autoSelect;\n    private _autofocus;\n    private _autocomplete;\n    private _autocorrect;\n    private _spellcheck;\n    private _autosize;\n    private _spinnerInterval;\n    private _spinnerTimeout;\n    private _minWidth;\n    private _unlockable;\n    constructor(cdr: ChangeDetectorRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    onChange(event: Event): void;\n    onKeyUp(event: KeyboardEvent): void;\n    onFocus(event: FocusEvent): void;\n    onBlur(event: Event): void;\n    validate(c: FormControl): {\n        [x: string]: any;\n    };\n    writeValue(val: string): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    togglePassword(): void;\n    setDisabledState(isDisabled: boolean): void;\n    incrementValue(event: MouseEvent): void;\n    decrementValue(event: MouseEvent): void;\n    clearSpinnerInterval(): void;\n    private onTouchedCallback;\n    private onChangeCallback;\n    private updateInputType;\n    private increment;\n    private decrement;\n}\n"]}