import { Injectable, RendererFactory2 } from '@angular/core';
import { InjectionService } from '../../services/injection/injection.service';
import { InjectionRegistryService } from '../../services/injection-registry/injection-registry.service';
import { DrawerComponent } from './drawer.component';
import { OverlayService } from '../overlay/overlay.service';
import { DrawerDirection } from './drawer-direction.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/injection/injection.service";
import * as i2 from "../overlay/overlay.service";
export class DrawerService extends InjectionRegistryService {
    constructor(injectionService, overlayService, rendererFactory) {
        super(injectionService);
        this.injectionService = injectionService;
        this.overlayService = overlayService;
        this.rendererFactory = rendererFactory;
        this.type = DrawerComponent;
        this.defaults = {
            inputs: {
                direction: DrawerDirection.Left
            }
        };
        this.zIndex = 995;
        this.size = 80;
        this.renderer = this.rendererFactory.createRenderer(null, null);
    }
    create(options) {
        const component = super.create(options);
        this.createSubscriptions(component, options.isRoot, options.parentContainer);
        return component;
    }
    destroy(component) {
        // race case clicking fast errors here
        if (component && component.instance) {
            component.instance.size = 0;
        }
        setTimeout(() => {
            this.zIndex = this.zIndex - 2;
            this.size = this.size + 10;
            this.overlayService.removeTriggerComponent(component);
            super.destroy(component);
        }, 10);
    }
    assignDefaults(options) {
        options = super.assignDefaults(options);
        if (!options.inputs.zIndex) {
            this.zIndex = this.overlayService.instance
                ? this.overlayService.instance.zIndex + 3
                : /* istanbul ignore next */ this.zIndex + 2;
            options.inputs.zIndex = this.zIndex;
        }
        this.size = this.size - 10;
        if (!options.inputs.size) {
            options.inputs.size = this.size;
        }
        return options;
    }
    createSubscriptions(component, isRoot = true, parentContainer) {
        if (isRoot) {
            this.overlayService.show({
                triggerComponent: component,
                zIndex: this.zIndex
            });
        }
        // eslint-disable-next-line prefer-const
        let closeSub;
        let overlaySub;
        const kill = (c) => {
            /* istanbul ignore if */
            if (component !== c) {
                return;
            }
            closeSub.unsubscribe();
            if (overlaySub) {
                overlaySub.unsubscribe();
            }
            if (this.parentListenerFunc && this.components.get(this.type).length === 1) {
                this.parentListenerFunc();
            }
            this.destroy(component);
        };
        closeSub = component.instance.close.subscribe(kill.bind(this, component));
        if (component.instance.closeOnOutsideClick) {
            if (isRoot) {
                overlaySub = this.overlayService.click.subscribe(kill);
            }
            else {
                const components = this.components.get(this.type);
                this.parentListenerFunc = this.renderer.listen(parentContainer, 'click', evt => {
                    /* istanbul ignore else */
                    if (evt.target === parentContainer) {
                        kill(components[components.length - 1]);
                    }
                });
            }
        }
    }
}
DrawerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DrawerService_Factory() { return new DrawerService(i0.ɵɵinject(i1.InjectionService), i0.ɵɵinject(i2.OverlayService), i0.ɵɵinject(i0.RendererFactory2)); }, token: DrawerService, providedIn: "root" });
DrawerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DrawerService.ctorParameters = () => [
    { type: InjectionService },
    { type: OverlayService },
    { type: RendererFactory2 }
];
//# sourceMappingURL=data:application/json;base64,