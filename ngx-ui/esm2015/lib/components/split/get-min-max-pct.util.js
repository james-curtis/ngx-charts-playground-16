import { basisToValue } from './basis-to-value.util';
import { isPercent } from './is-percent.util';
export function getMinMaxPct(minBasis, maxBasis, grow, shrink, baseBasisPct, basisToPx) {
    // minimum and maximum basis determined by max/min inputs
    let minBasisPct = isPercent(minBasis) ? basisToValue(minBasis) : basisToValue(minBasis) / basisToPx;
    let maxBasisPct = isPercent(maxBasis) ? basisToValue(maxBasis) : basisToValue(maxBasis) / basisToPx;
    // minimum and maximum basis determined by flex inputs
    minBasisPct = Math.max(minBasisPct || 0, shrink === '0' ? baseBasisPct : 0);
    maxBasisPct = Math.min(maxBasisPct || 100, grow === '0' ? baseBasisPct : 100);
    return [minBasisPct, maxBasisPct];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LW1pbi1tYXgtcGN0LnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zd2ltbGFuZS9uZ3gtdWkvc3JjL2xpYi9jb21wb25lbnRzL3NwbGl0L2dldC1taW4tbWF4LXBjdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFOUMsTUFBTSxVQUFVLFlBQVksQ0FDMUIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsSUFBWSxFQUNaLE1BQWMsRUFDZCxZQUFvQixFQUNwQixTQUFpQjtJQUVqQix5REFBeUQ7SUFDekQsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDcEcsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxTQUFTLENBQUM7SUFFcEcsc0RBQXNEO0lBQ3RELFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFOUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzaXNUb1ZhbHVlIH0gZnJvbSAnLi9iYXNpcy10by12YWx1ZS51dGlsJztcbmltcG9ydCB7IGlzUGVyY2VudCB9IGZyb20gJy4vaXMtcGVyY2VudC51dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbk1heFBjdChcbiAgbWluQmFzaXM6IHN0cmluZyxcbiAgbWF4QmFzaXM6IHN0cmluZyxcbiAgZ3Jvdzogc3RyaW5nLFxuICBzaHJpbms6IHN0cmluZyxcbiAgYmFzZUJhc2lzUGN0OiBudW1iZXIsXG4gIGJhc2lzVG9QeDogbnVtYmVyXG4pIHtcbiAgLy8gbWluaW11bSBhbmQgbWF4aW11bSBiYXNpcyBkZXRlcm1pbmVkIGJ5IG1heC9taW4gaW5wdXRzXG4gIGxldCBtaW5CYXNpc1BjdCA9IGlzUGVyY2VudChtaW5CYXNpcykgPyBiYXNpc1RvVmFsdWUobWluQmFzaXMpIDogYmFzaXNUb1ZhbHVlKG1pbkJhc2lzKSAvIGJhc2lzVG9QeDtcbiAgbGV0IG1heEJhc2lzUGN0ID0gaXNQZXJjZW50KG1heEJhc2lzKSA/IGJhc2lzVG9WYWx1ZShtYXhCYXNpcykgOiBiYXNpc1RvVmFsdWUobWF4QmFzaXMpIC8gYmFzaXNUb1B4O1xuXG4gIC8vIG1pbmltdW0gYW5kIG1heGltdW0gYmFzaXMgZGV0ZXJtaW5lZCBieSBmbGV4IGlucHV0c1xuICBtaW5CYXNpc1BjdCA9IE1hdGgubWF4KG1pbkJhc2lzUGN0IHx8IDAsIHNocmluayA9PT0gJzAnID8gYmFzZUJhc2lzUGN0IDogMCk7XG4gIG1heEJhc2lzUGN0ID0gTWF0aC5taW4obWF4QmFzaXNQY3QgfHwgMTAwLCBncm93ID09PSAnMCcgPyBiYXNlQmFzaXNQY3QgOiAxMDApO1xuXG4gIHJldHVybiBbbWluQmFzaXNQY3QsIG1heEJhc2lzUGN0XTtcbn1cbiJdfQ==