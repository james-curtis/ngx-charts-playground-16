import { Input, ContentChildren, QueryList, ElementRef, Directive, HostBinding } from '@angular/core';
import { SplitAreaDirective } from './split-area.directive';
import { SplitHandleComponent } from './split-handle.component';
import { SplitDirection } from './split-direction.enum';
import { getMinMaxPct } from './get-min-max-pct.util';
import { basisToValue } from './basis-to-value.util';
import { isPercent } from './is-percent.util';
import { resizeAreaBy } from './resize-area-by.util';
export class SplitDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.direction = SplitDirection.Row;
        this.subscriptions = [];
    }
    get rowCss() {
        return this.direction === SplitDirection.Row;
    }
    get columnCss() {
        return this.direction === SplitDirection.Column;
    }
    ngAfterContentInit() {
        this.subscriptions.push(...this.handles.map(d => d.drag.subscribe((ev) => this.onDrag(ev))));
        this.subscriptions.push(...this.handles.map(d => d.dblclick.subscribe(() => this.onDblClick())));
        this.updateHandles();
    }
    ngOnChanges() {
        if (!this.direction) {
            this.direction = SplitDirection.Row;
        }
        this.updateHandles();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => {
            sub.unsubscribe();
        });
    }
    resize(delta) {
        const basisToPx = (this.rowCss ? this.elementRef.nativeElement.clientWidth : this.elementRef.nativeElement.clientHeight) / 100;
        const areas = this.areas.toArray();
        // for now assuming splitter is after first area
        const [first, ...rest] = areas;
        [first].forEach(area => (delta = resizeAreaBy(area, delta, basisToPx)));
        // delta is distributed left to right
        rest.forEach(area => (delta += resizeAreaBy(area, -delta, basisToPx)));
    }
    updateHandles() {
        if (this.handles) {
            this.handles.forEach(d => (d.direction = this.direction));
        }
    }
    onDblClick() {
        const basisToPx = (this.rowCss ? this.elementRef.nativeElement.clientWidth : this.elementRef.nativeElement.clientHeight) / 100;
        const area = this.areas.first;
        /* istanbul ignore if */
        if (!area)
            return;
        const [grow, shrink, basis] = area.currentFlexParts;
        const isPct = isPercent(basis);
        const basisValue = basisToValue(basis);
        // get basis in px and %
        const basisPx = isPct ? basisValue * basisToPx : basisValue;
        const basisPct = basisPx / basisToPx;
        // get baseBasis in percent
        const baseBasis = area.initialFlexParts[2];
        const baseBasisPct = basisToValue(baseBasis) / (isPercent(baseBasis) ? basisToPx : 1);
        const [minBasisPct, maxBasisPct] = getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx);
        // max and min deltas
        const deltaMin = basisPct - minBasisPct;
        const deltaMax = maxBasisPct - basisPct;
        const delta = deltaMin < deltaMax ? deltaMax : -deltaMin;
        const deltaPx = delta * basisToPx;
        this.resize(deltaPx);
    }
    onDrag({ movementX, movementY }) {
        const deltaPx = this.direction === SplitDirection.Row ? movementX : movementY;
        this.resize(deltaPx);
    }
}
SplitDirective.decorators = [
    { type: Directive, args: [{
                exportAs: 'ngxSplit',
                selector: '[ngxSplit]',
                host: {
                    class: 'ngx-split',
                    '[class.row-split]': 'rowCss',
                    '[class.column-split]': 'columnCss',
                    '[style.display]': '"flex"',
                    '[style.height]': '"100%"',
                    '[style.width]': '"100%"'
                }
            },] }
];
SplitDirective.ctorParameters = () => [
    { type: ElementRef }
];
SplitDirective.propDecorators = {
    direction: [{ type: HostBinding, args: ['style.flex-direction',] }, { type: Input, args: ['ngxSplit',] }],
    handles: [{ type: ContentChildren, args: [SplitHandleComponent, { descendants: false },] }],
    areas: [{ type: ContentChildren, args: [SplitAreaDirective, { descendants: false },] }]
};
//# sourceMappingURL=data:application/json;base64,