import { isPercent } from './is-percent.util';
import { basisToValue } from './basis-to-value.util';
import { getMinMaxPct } from './get-min-max-pct.util';
export function resizeAreaBy(area, _delta, basisToPx) {
    const [grow, shrink, basis] = area.currentFlexParts;
    const isPct = isPercent(basis);
    const basisValue = basisToValue(basis);
    // get baseBasis in percent
    const baseBasis = area.initialFlexParts[2];
    const baseBasisPct = isPercent(baseBasis) ? basisToValue(baseBasis) : basisToValue(baseBasis) / basisToPx;
    // get basis in px and %
    const basisPx = isPct ? basisValue * basisToPx : basisValue;
    // determine which dir and calc the diff
    let newBasisPx = basisPx + _delta;
    let newBasisPct = newBasisPx / basisToPx;
    const [minBasisPct, maxBasisPct] = getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx);
    // obey max and min
    newBasisPct = Math.max(newBasisPct, minBasisPct);
    newBasisPct = Math.min(newBasisPct, maxBasisPct);
    // calculate new basis on px
    newBasisPx = newBasisPct * basisToPx;
    // update flexlayout
    area.updateBasis(isPct ? newBasisPct + '%' : newBasisPx + 'px');
    // return actual change in px
    return newBasisPx - basisPx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWFyZWEtYnkudXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N3aW1sYW5lL25neC11aS9zcmMvbGliL2NvbXBvbmVudHMvc3BsaXQvcmVzaXplLWFyZWEtYnkudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV0RCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQXdCLEVBQUUsTUFBYyxFQUFFLFNBQWlCO0lBQ3RGLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNwRCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZDLDJCQUEyQjtJQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7SUFFMUcsd0JBQXdCO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBRTVELHdDQUF3QztJQUN4QyxJQUFJLFVBQVUsR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLElBQUksV0FBVyxHQUFHLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFFekMsTUFBTSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRXJILG1CQUFtQjtJQUNuQixXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakQsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWpELDRCQUE0QjtJQUM1QixVQUFVLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUVyQyxvQkFBb0I7SUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUVoRSw2QkFBNkI7SUFDN0IsT0FBTyxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcGxpdEFyZWFEaXJlY3RpdmUgfSBmcm9tICcuL3NwbGl0LWFyZWEuZGlyZWN0aXZlJztcbmltcG9ydCB7IGlzUGVyY2VudCB9IGZyb20gJy4vaXMtcGVyY2VudC51dGlsJztcbmltcG9ydCB7IGJhc2lzVG9WYWx1ZSB9IGZyb20gJy4vYmFzaXMtdG8tdmFsdWUudXRpbCc7XG5pbXBvcnQgeyBnZXRNaW5NYXhQY3QgfSBmcm9tICcuL2dldC1taW4tbWF4LXBjdC51dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUFyZWFCeShhcmVhOiBTcGxpdEFyZWFEaXJlY3RpdmUsIF9kZWx0YTogbnVtYmVyLCBiYXNpc1RvUHg6IG51bWJlcikge1xuICBjb25zdCBbZ3Jvdywgc2hyaW5rLCBiYXNpc10gPSBhcmVhLmN1cnJlbnRGbGV4UGFydHM7XG4gIGNvbnN0IGlzUGN0ID0gaXNQZXJjZW50KGJhc2lzKTtcbiAgY29uc3QgYmFzaXNWYWx1ZSA9IGJhc2lzVG9WYWx1ZShiYXNpcyk7XG5cbiAgLy8gZ2V0IGJhc2VCYXNpcyBpbiBwZXJjZW50XG4gIGNvbnN0IGJhc2VCYXNpcyA9IGFyZWEuaW5pdGlhbEZsZXhQYXJ0c1syXTtcbiAgY29uc3QgYmFzZUJhc2lzUGN0ID0gaXNQZXJjZW50KGJhc2VCYXNpcykgPyBiYXNpc1RvVmFsdWUoYmFzZUJhc2lzKSA6IGJhc2lzVG9WYWx1ZShiYXNlQmFzaXMpIC8gYmFzaXNUb1B4O1xuXG4gIC8vIGdldCBiYXNpcyBpbiBweCBhbmQgJVxuICBjb25zdCBiYXNpc1B4ID0gaXNQY3QgPyBiYXNpc1ZhbHVlICogYmFzaXNUb1B4IDogYmFzaXNWYWx1ZTtcblxuICAvLyBkZXRlcm1pbmUgd2hpY2ggZGlyIGFuZCBjYWxjIHRoZSBkaWZmXG4gIGxldCBuZXdCYXNpc1B4ID0gYmFzaXNQeCArIF9kZWx0YTtcbiAgbGV0IG5ld0Jhc2lzUGN0ID0gbmV3QmFzaXNQeCAvIGJhc2lzVG9QeDtcblxuICBjb25zdCBbbWluQmFzaXNQY3QsIG1heEJhc2lzUGN0XSA9IGdldE1pbk1heFBjdChhcmVhLm1pbkJhc2lzLCBhcmVhLm1heEJhc2lzLCBncm93LCBzaHJpbmssIGJhc2VCYXNpc1BjdCwgYmFzaXNUb1B4KTtcblxuICAvLyBvYmV5IG1heCBhbmQgbWluXG4gIG5ld0Jhc2lzUGN0ID0gTWF0aC5tYXgobmV3QmFzaXNQY3QsIG1pbkJhc2lzUGN0KTtcbiAgbmV3QmFzaXNQY3QgPSBNYXRoLm1pbihuZXdCYXNpc1BjdCwgbWF4QmFzaXNQY3QpO1xuXG4gIC8vIGNhbGN1bGF0ZSBuZXcgYmFzaXMgb24gcHhcbiAgbmV3QmFzaXNQeCA9IG5ld0Jhc2lzUGN0ICogYmFzaXNUb1B4O1xuXG4gIC8vIHVwZGF0ZSBmbGV4bGF5b3V0XG4gIGFyZWEudXBkYXRlQmFzaXMoaXNQY3QgPyBuZXdCYXNpc1BjdCArICclJyA6IG5ld0Jhc2lzUHggKyAncHgnKTtcblxuICAvLyByZXR1cm4gYWN0dWFsIGNoYW5nZSBpbiBweFxuICByZXR1cm4gbmV3QmFzaXNQeCAtIGJhc2lzUHg7XG59XG4iXX0=