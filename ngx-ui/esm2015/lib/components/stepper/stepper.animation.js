import { animate, state, style, transition, trigger } from '@angular/animations';
import { StepperAnimationStates } from './stepper-animation-states.enum';
import { StepperBarAnimationStates } from './stepper-bar-animation-states.enum';
const BAR_THICKNESS = 2;
const BAR_STEP_RATIO = 1.4;
export const stepperAnimations = {
    horizontalStepTransition: trigger('stepHorizontalTransition', [
        state(StepperAnimationStates.Left, style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Right, style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Current, style({ transform: 'none', visibility: 'visible' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))
    ]),
    verticalStepTransition: trigger('stepVerticalTransition', [
        state(StepperAnimationStates.Up, style({ transform: 'translate3d(0, -100%, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Down, style({ transform: 'translate3d(0, 100%, 0)', visibility: 'hidden' })),
        state(StepperAnimationStates.Current, style({ transform: 'none', visibility: 'visible' })),
        transition(`* <=> ${StepperAnimationStates.Current}`, animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
    ]),
    horizontalBarTransition: trigger('stepperBarHorizontalTransition', [
        state(StepperBarAnimationStates.Stay, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateX({{ xOffset }}px)',
            height: `${BAR_THICKNESS}px`,
            width: `calc(${BAR_STEP_RATIO} * {{ width }}px)`
        }), { params: { xOffset: 0, width: 0 } }),
        state(StepperBarAnimationStates.Move, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateX({{ xOffset }}px)',
            height: `${BAR_THICKNESS}px`,
            width: `calc({{ width }}px * ${BAR_STEP_RATIO} / 2)`,
            'margin-left': `calc(${BAR_STEP_RATIO} * {{ width }}px / 4)`
        }), { params: { xOffset: 0, width: 0 } })
    ]),
    verticalBarTransition: trigger('stepperBarVerticalTransition', [
        state(StepperBarAnimationStates.Stay, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateY({{ yOffset }}px)',
            width: `${BAR_THICKNESS}px`,
            height: `calc(${BAR_STEP_RATIO} * {{ height }}px)`
        }), { params: { yOffset: 0, height: 0 } }),
        state(StepperBarAnimationStates.Move, style({
            transition: '500ms cubic-bezier(0.35, 0, 0.25, 1)',
            transform: 'translateY({{ yOffset }}px)',
            width: `${BAR_THICKNESS}px`,
            height: `calc({{ height }}px * ${BAR_STEP_RATIO} / 2)`,
            'margin-top': `calc(${BAR_STEP_RATIO} * {{ height }}px / 4)`
        }), { params: { yOffset: 0, height: 0 } })
    ])
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5hbmltYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zd2ltbGFuZS9uZ3gtdWkvc3JjL2xpYi9jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVoRixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDO0FBRTNCLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9CLHdCQUF3QixFQUFFLE9BQU8sQ0FBQywwQkFBMEIsRUFBRTtRQUM1RCxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDMUYsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN0RSxDQUFDO0lBRUYsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixFQUFFO1FBQ3hELEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLDBCQUEwQixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3pHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMxRixVQUFVLENBQUMsU0FBUyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN2RyxDQUFDO0lBRUYsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxFQUFFO1FBQ2pFLEtBQUssQ0FDSCx5QkFBeUIsQ0FBQyxJQUFJLEVBQzlCLEtBQUssQ0FBQztZQUNKLFVBQVUsRUFBRSxzQ0FBc0M7WUFDbEQsU0FBUyxFQUFFLDZCQUE2QjtZQUN4QyxNQUFNLEVBQUUsR0FBRyxhQUFhLElBQUk7WUFDNUIsS0FBSyxFQUFFLFFBQVEsY0FBYyxtQkFBbUI7U0FDakQsQ0FBQyxFQUNGLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDckM7UUFDRCxLQUFLLENBQ0gseUJBQXlCLENBQUMsSUFBSSxFQUM5QixLQUFLLENBQUM7WUFDSixVQUFVLEVBQUUsc0NBQXNDO1lBQ2xELFNBQVMsRUFBRSw2QkFBNkI7WUFDeEMsTUFBTSxFQUFFLEdBQUcsYUFBYSxJQUFJO1lBQzVCLEtBQUssRUFBRSx3QkFBd0IsY0FBYyxPQUFPO1lBQ3BELGFBQWEsRUFBRSxRQUFRLGNBQWMsdUJBQXVCO1NBQzdELENBQUMsRUFDRixFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ3JDO0tBQ0YsQ0FBQztJQUVGLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRTtRQUM3RCxLQUFLLENBQ0gseUJBQXlCLENBQUMsSUFBSSxFQUM5QixLQUFLLENBQUM7WUFDSixVQUFVLEVBQUUsc0NBQXNDO1lBQ2xELFNBQVMsRUFBRSw2QkFBNkI7WUFDeEMsS0FBSyxFQUFFLEdBQUcsYUFBYSxJQUFJO1lBQzNCLE1BQU0sRUFBRSxRQUFRLGNBQWMsb0JBQW9CO1NBQ25ELENBQUMsRUFDRixFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ3RDO1FBQ0QsS0FBSyxDQUNILHlCQUF5QixDQUFDLElBQUksRUFDOUIsS0FBSyxDQUFDO1lBQ0osVUFBVSxFQUFFLHNDQUFzQztZQUNsRCxTQUFTLEVBQUUsNkJBQTZCO1lBQ3hDLEtBQUssRUFBRSxHQUFHLGFBQWEsSUFBSTtZQUMzQixNQUFNLEVBQUUseUJBQXlCLGNBQWMsT0FBTztZQUN0RCxZQUFZLEVBQUUsUUFBUSxjQUFjLHdCQUF3QjtTQUM3RCxDQUFDLEVBQ0YsRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUN0QztLQUNGLENBQUM7Q0FDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IFN0ZXBwZXJBbmltYXRpb25TdGF0ZXMgfSBmcm9tICcuL3N0ZXBwZXItYW5pbWF0aW9uLXN0YXRlcy5lbnVtJztcbmltcG9ydCB7IFN0ZXBwZXJCYXJBbmltYXRpb25TdGF0ZXMgfSBmcm9tICcuL3N0ZXBwZXItYmFyLWFuaW1hdGlvbi1zdGF0ZXMuZW51bSc7XG5cbmNvbnN0IEJBUl9USElDS05FU1MgPSAyO1xuY29uc3QgQkFSX1NURVBfUkFUSU8gPSAxLjQ7XG5cbmV4cG9ydCBjb25zdCBzdGVwcGVyQW5pbWF0aW9ucyA9IHtcbiAgaG9yaXpvbnRhbFN0ZXBUcmFuc2l0aW9uOiB0cmlnZ2VyKCdzdGVwSG9yaXpvbnRhbFRyYW5zaXRpb24nLCBbXG4gICAgc3RhdGUoU3RlcHBlckFuaW1hdGlvblN0YXRlcy5MZWZ0LCBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKScsIHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pKSxcbiAgICBzdGF0ZShTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLlJpZ2h0LCBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDEwMCUsIDAsIDApJywgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSkpLFxuICAgIHN0YXRlKFN0ZXBwZXJBbmltYXRpb25TdGF0ZXMuQ3VycmVudCwgc3R5bGUoeyB0cmFuc2Zvcm06ICdub25lJywgdmlzaWJpbGl0eTogJ3Zpc2libGUnIH0pKSxcbiAgICB0cmFuc2l0aW9uKCcqID0+IConLCBhbmltYXRlKCc1MDBtcyBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSknKSlcbiAgXSksXG5cbiAgdmVydGljYWxTdGVwVHJhbnNpdGlvbjogdHJpZ2dlcignc3RlcFZlcnRpY2FsVHJhbnNpdGlvbicsIFtcbiAgICBzdGF0ZShTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLlVwLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIC0xMDAlLCAwKScsIHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pKSxcbiAgICBzdGF0ZShTdGVwcGVyQW5pbWF0aW9uU3RhdGVzLkRvd24sIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMTAwJSwgMCknLCB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSksXG4gICAgc3RhdGUoU3RlcHBlckFuaW1hdGlvblN0YXRlcy5DdXJyZW50LCBzdHlsZSh7IHRyYW5zZm9ybTogJ25vbmUnLCB2aXNpYmlsaXR5OiAndmlzaWJsZScgfSkpLFxuICAgIHRyYW5zaXRpb24oYCogPD0+ICR7U3RlcHBlckFuaW1hdGlvblN0YXRlcy5DdXJyZW50fWAsIGFuaW1hdGUoJzIyNW1zIGN1YmljLWJlemllcigwLjQsIDAuMCwgMC4yLCAxKScpKVxuICBdKSxcblxuICBob3Jpem9udGFsQmFyVHJhbnNpdGlvbjogdHJpZ2dlcignc3RlcHBlckJhckhvcml6b250YWxUcmFuc2l0aW9uJywgW1xuICAgIHN0YXRlKFxuICAgICAgU3RlcHBlckJhckFuaW1hdGlvblN0YXRlcy5TdGF5LFxuICAgICAgc3R5bGUoe1xuICAgICAgICB0cmFuc2l0aW9uOiAnNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzUsIDAsIDAuMjUsIDEpJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCh7eyB4T2Zmc2V0IH19cHgpJyxcbiAgICAgICAgaGVpZ2h0OiBgJHtCQVJfVEhJQ0tORVNTfXB4YCxcbiAgICAgICAgd2lkdGg6IGBjYWxjKCR7QkFSX1NURVBfUkFUSU99ICoge3sgd2lkdGggfX1weClgXG4gICAgICB9KSxcbiAgICAgIHsgcGFyYW1zOiB7IHhPZmZzZXQ6IDAsIHdpZHRoOiAwIH0gfVxuICAgICksXG4gICAgc3RhdGUoXG4gICAgICBTdGVwcGVyQmFyQW5pbWF0aW9uU3RhdGVzLk1vdmUsXG4gICAgICBzdHlsZSh7XG4gICAgICAgIHRyYW5zaXRpb246ICc1MDBtcyBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSknLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKHt7IHhPZmZzZXQgfX1weCknLFxuICAgICAgICBoZWlnaHQ6IGAke0JBUl9USElDS05FU1N9cHhgLFxuICAgICAgICB3aWR0aDogYGNhbGMoe3sgd2lkdGggfX1weCAqICR7QkFSX1NURVBfUkFUSU99IC8gMilgLFxuICAgICAgICAnbWFyZ2luLWxlZnQnOiBgY2FsYygke0JBUl9TVEVQX1JBVElPfSAqIHt7IHdpZHRoIH19cHggLyA0KWBcbiAgICAgIH0pLFxuICAgICAgeyBwYXJhbXM6IHsgeE9mZnNldDogMCwgd2lkdGg6IDAgfSB9XG4gICAgKVxuICBdKSxcblxuICB2ZXJ0aWNhbEJhclRyYW5zaXRpb246IHRyaWdnZXIoJ3N0ZXBwZXJCYXJWZXJ0aWNhbFRyYW5zaXRpb24nLCBbXG4gICAgc3RhdGUoXG4gICAgICBTdGVwcGVyQmFyQW5pbWF0aW9uU3RhdGVzLlN0YXksXG4gICAgICBzdHlsZSh7XG4gICAgICAgIHRyYW5zaXRpb246ICc1MDBtcyBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSknLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKHt7IHlPZmZzZXQgfX1weCknLFxuICAgICAgICB3aWR0aDogYCR7QkFSX1RISUNLTkVTU31weGAsXG4gICAgICAgIGhlaWdodDogYGNhbGMoJHtCQVJfU1RFUF9SQVRJT30gKiB7eyBoZWlnaHQgfX1weClgXG4gICAgICB9KSxcbiAgICAgIHsgcGFyYW1zOiB7IHlPZmZzZXQ6IDAsIGhlaWdodDogMCB9IH1cbiAgICApLFxuICAgIHN0YXRlKFxuICAgICAgU3RlcHBlckJhckFuaW1hdGlvblN0YXRlcy5Nb3ZlLFxuICAgICAgc3R5bGUoe1xuICAgICAgICB0cmFuc2l0aW9uOiAnNTAwbXMgY3ViaWMtYmV6aWVyKDAuMzUsIDAsIDAuMjUsIDEpJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSh7eyB5T2Zmc2V0IH19cHgpJyxcbiAgICAgICAgd2lkdGg6IGAke0JBUl9USElDS05FU1N9cHhgLFxuICAgICAgICBoZWlnaHQ6IGBjYWxjKHt7IGhlaWdodCB9fXB4ICogJHtCQVJfU1RFUF9SQVRJT30gLyAyKWAsXG4gICAgICAgICdtYXJnaW4tdG9wJzogYGNhbGMoJHtCQVJfU1RFUF9SQVRJT30gKiB7eyBoZWlnaHQgfX1weCAvIDQpYFxuICAgICAgfSksXG4gICAgICB7IHBhcmFtczogeyB5T2Zmc2V0OiAwLCBoZWlnaHQ6IDAgfSB9XG4gICAgKVxuICBdKVxufTtcbiJdfQ==