import { Component, Input, Output, ContentChildren, QueryList, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TabComponent } from './tab.component';
export class TabsComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.selectTab = new EventEmitter();
        // For backwards compat... user selectTab instead.
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = this.selectTab;
        this.tabEvents = [];
        this._destroy$ = new Subject();
    }
    get index() {
        const tabs = this.tabs.toArray();
        return tabs.findIndex(tab => tab.active);
    }
    ngAfterContentInit() {
        const tabs = this.tabs.toArray();
        const actives = this.tabs.filter(t => t.active);
        if (actives.length > 1) {
            // eslint-disable-next-line no-console
            console.error("Multiple active tabs set 'active'");
        }
        else if (!actives.length && tabs.length) {
            setTimeout(() => {
                tabs[0].active = true;
                tabs[0].detectChanges();
                this.cdr.markForCheck();
            });
        }
        // Watches for changes to tab inputs
        this.setupTabInputWatcher();
        // Watches for change tabs themselves
        this.tabs.changes.pipe(takeUntil(this._destroy$)).subscribe(() => {
            this.setupTabInputWatcher();
            this.cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    tabClicked(activeTab) {
        this.tabs.forEach(tab => (tab.active = false));
        activeTab.active = true;
        this.tabs.forEach(tab => tab.detectChanges());
        this.cdr.markForCheck();
        this.selectTab.emit(activeTab);
    }
    move(offset) {
        const tabs = this.tabs.toArray();
        for (let i = this.index + offset; i < tabs.length && i >= 0; i += offset) {
            const tab = tabs[i];
            if (tab && !tab.disabled) {
                this.tabClicked(tabs[i]);
                return;
            }
        }
    }
    next() {
        this.move(1);
    }
    prev() {
        this.move(-1);
    }
    setupTabInputWatcher() {
        this.tabEvents.forEach(t => {
            t.unsubscribe();
        });
        this.tabEvents = this.tabs.toArray().map(t => {
            return t.inputChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {
                this.cdr.markForCheck();
            });
        });
    }
}
TabsComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'ngxTabs',
                selector: 'ngx-tabs',
                template: "<section>\n  <ul class=\"ngx-tabs-list list-reset\" [class.tabs-vertical]=\"vertical\" [class.tabs-horizontal]=\"!vertical\">\n    <li *ngFor=\"let tab of tabs\" class=\"ngx-tab\" [class.disabled]=\"tab.disabled\" [class.active]=\"tab.active\">\n      <button (click)=\"tabClicked(tab)\" [disabled]=\"tab.disabled\">\n        <ng-container *ngTemplateOutlet=\"tab.labelTemplate; context: { $implicit: tab }\"> </ng-container>\n      </button>\n    </li>\n  </ul>\n  <div class=\"ngx-tab-content\">\n    <ng-content></ng-content>\n  </div>\n</section>\n",
                host: {
                    class: 'ngx-tabs'
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".ngx-tabs{margin-bottom:2em;display:block}.ngx-tabs .ngx-tabs-list{display:block;border-bottom:2px solid #313847}.ngx-tabs .ngx-tabs-list li{display:inline-block}.ngx-tabs .ngx-tabs-list li.active button,.ngx-tabs .ngx-tabs-list li.active button:focus,.ngx-tabs .ngx-tabs-list li.active button:hover{color:#cfcfcf;border-width:0}.ngx-tabs .ngx-tabs-list li.active button:not([disabled]):after,.ngx-tabs .ngx-tabs-list li:hover button:not([disabled]):after{transform:scale(1)}.ngx-tabs .ngx-tabs-list li button{border:none;color:#cdd2dd;background:transparent;box-shadow:none;font-size:1.1rem;box-sizing:border-box;display:inline-block;margin:0;padding:.35em .75em;position:relative;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:inherit;font-size:1em;outline:none;bottom:-1px}.ngx-tabs .ngx-tabs-list li button:not([disabled]):hover{border:none;color:#cfcfcf;background:transparent;opacity:1}.ngx-tabs .ngx-tabs-list li button:after{content:\"\";background:#1483ff;height:2px;position:absolute;width:100%;left:0;bottom:-1px;transition:all .25s ease 0s;transform:scale(0);background:#1483ff none repeat scroll 0 0;color:#cfcfcf}.ngx-tabs .ngx-tab-content{padding:10px}"]
            },] }
];
TabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
TabsComponent.propDecorators = {
    vertical: [{ type: Input }],
    selectTab: [{ type: Output }],
    select: [{ type: Output }],
    tabs: [{ type: ContentChildren, args: [TabComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,