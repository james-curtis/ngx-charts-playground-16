import { Component, Input, ViewEncapsulation, HostListener, ChangeDetectionStrategy } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { BehaviorSubject } from 'rxjs';
import { ButtonState } from './button-state.enum';
export class ButtonComponent {
    constructor() {
        this.inProgress$ = new BehaviorSubject(false);
        this.active$ = new BehaviorSubject(false);
        this.success$ = new BehaviorSubject(false);
        this.fail$ = new BehaviorSubject(false);
        this._state = ButtonState.Active;
        this._disabled = false;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(v) {
        this._disabled = coerceBooleanProperty(v);
    }
    get state() {
        return this._state;
    }
    set state(v) {
        this._state = v;
        this.inProgress$.next(v === ButtonState.InProgress);
        this.active$.next(v === ButtonState.Active);
        this.success$.next(v === ButtonState.Success);
        this.fail$.next(v === ButtonState.Fail);
    }
    get timeout() {
        return this._timeout === undefined ? 3000 : this._timeout;
    }
    set timeout(v) {
        this._timeout = coerceNumberProperty(v);
    }
    ngOnInit() {
        this.updateState();
    }
    ngOnChanges() {
        this.updateState();
        this.updatePromise();
    }
    updatePromise() {
        if (this.promise) {
            this.state = ButtonState.InProgress;
            return this.promise
                .then(() => {
                this.state = ButtonState.Success;
                this.updateState();
            })
                .catch(() => {
                this.state = ButtonState.Fail;
                this.updateState();
            });
        }
    }
    updateState() {
        if (!this.state) {
            this.state = ButtonState.Active;
        }
        if (this.timeout &&
            (this.state === ButtonState.Success || this.state === ButtonState.Fail || this.state === ButtonState.InProgress)) {
            clearTimeout(this._timer);
            this._timer = setTimeout(() => {
                this.state = ButtonState.Active;
                this.updateState();
            }, this.timeout);
        }
    }
    onClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            event.preventDefault();
            return false;
        }
        return true;
    }
}
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-button',
                exportAs: 'ngxButton',
                template: "<button [disabled]=\"disabled\">\n  <span class=\"content\"><ng-content></ng-content></span>\n  <span class=\"state-icon\">\n    <span *ngIf=\"inProgress$ | async\" class=\"icon icon-loading\"></span>\n    <span *ngIf=\"success$ | async\" class=\"icon icon-check\"></span>\n    <span *ngIf=\"fail$ | async\" class=\"icon icon-x\"></span>\n  </span>\n</button>\n",
                host: {
                    class: 'ngx-button',
                    '[class.in-progress]': 'inProgress$.value',
                    '[class.active]': 'active$.value',
                    '[class.success]': 'success$.value',
                    '[class.fail]': 'fail$.value',
                    '[class.disabled-button]': 'disabled'
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["button{box-sizing:border-box;color:inherit;cursor:pointer;display:inline-block;position:relative;text-align:center;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:inherit;background:transparent;border:none;text-shadow:1px 1px rgba(0,0,0,.07)}button:active,button:focus{outline:none}.btn{box-sizing:border-box;color:#fff;display:inline-block;padding:.35em .55em;position:relative;text-align:center;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:inherit;font-size:.9em;font-weight:700;outline:none;line-height:1em;background:#455066;border:1px solid transparent;border-radius:2px;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);transition:background-color .2s,box-shadow .2s}.btn .icon,.btn .ngx-icon{font-weight:400;vertical-align:middle;line-height:1em;font-size:.9em}.btn .icon:before,.btn .ngx-icon:before{font-weight:inherit}.btn .icon.has-text,.btn .icon.has-text-right,.btn .ngx-icon.has-text,.btn .ngx-icon.has-text-right{margin-right:.2em}.btn .icon.has-text-left,.btn .ngx-icon.has-text-left{margin-left:.2em}.btn::-moz-focus-inner{border:0;padding:0}.btn:focus{outline:none;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 3px 3px -2px rgba(0,0,0,.12)}.btn:active:hover:focus:not(.disabled),.btn:active:hover:focus:not([disabled]){cursor:pointer;background:#313847}.btn:active:hover:focus:not(.disabled).btn-primary,.btn:active:hover:focus:not([disabled]).btn-primary{background-color:#1483ff}.btn:active:hover:focus:not(.disabled).btn-warning,.btn:active:hover:focus:not([disabled]).btn-warning{background-color:#ffa814}.btn:active:hover:focus:not(.disabled).btn-danger,.btn:active:hover:focus:not([disabled]).btn-danger{background-color:#ff4514}.btn:active:hover:focus:not(.disabled).btn-link,.btn:active:hover:focus:not([disabled]).btn-link{background-color:transparent}.btn:active:hover:focus:not(.disabled).btn-bordered,.btn:active:hover:focus:not([disabled]).btn-bordered{border-color:#94c6ff;color:#94c6ff}.btn:active,.btn:focus,.btn:hover{text-decoration:none}.btn.small{font-size:.6em}.btn.large{font-size:1.3em}.btn.btn-primary{background-color:#479eff}.btn.btn-primary.btn-primary-gradient{background:linear-gradient(125.43deg,#54cdfc 10.86%,#479eff 49.11%)}.btn.btn-warning{background-color:#ffbb47;color:#07080b}.btn.btn-danger{background-color:#ff6d47}.btn.btn-link{background-color:transparent;box-shadow:none}.btn.btn-bordered,.btn.btn-primary.btn-bordered{border:1px solid #479eff;color:#479eff;background-color:transparent;box-shadow:none}.btn.btn-bordered.disabled-button,.btn.btn-primary.btn-bordered.disabled-button{opacity:.5}.btn.btn-bordered.disabled-button .button,.btn.btn-primary.btn-bordered.disabled-button .button{opacity:1}.btn.btn-default.btn-bordered{border:1px solid #fff;color:#fff;background-color:transparent;box-shadow:none}.btn.btn-default.btn-bordered:hover{border-color:#1483ff!important;color:#1483ff!important}.btn.btn-default.btn-bordered.disabled-button{opacity:.5}.btn.btn-default.btn-bordered.disabled-button .button{opacity:1}.btn.btn-file{cursor:pointer;padding:0}.btn.btn-file label{display:block;cursor:pointer;padding:.35em .75em}.btn.btn-file[disabled] label{cursor:not-allowed}.btn.btn-file input[type=file]{pointer-events:none;position:absolute;left:-9999px}.ngx-button{transition:background-color .25s ease-out!important}.ngx-button button{padding:0;width:100%}.ngx-button.disabled-button{pointer-events:none}.ngx-button.success{background-color:#1ddeb6!important;color:#fff}.ngx-button.fail{background-color:#ff4514!important;color:#fff}.ngx-button:focus{outline:none;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 3px 3px -2px rgba(0,0,0,.12)}.ngx-button.fail,.ngx-button.in-progress,.ngx-button.success{pointer-events:auto;cursor:wait!important;color:#fff;position:relative;opacity:1!important}.ngx-button.fail button,.ngx-button.in-progress button,.ngx-button.success button{opacity:1}.ngx-button.fail *,.ngx-button.fail:active,.ngx-button.in-progress *,.ngx-button.in-progress:active,.ngx-button.success *,.ngx-button.success:active{pointer-events:none}.ngx-button.fail .content,.ngx-button.in-progress .content,.ngx-button.success .content{opacity:0;transition:opacity .25s ease-out}.ngx-button.fail.active .content,.ngx-button.in-progress.active .content,.ngx-button.success.active .content{opacity:1}.ngx-button.fail .state-icon,.ngx-button.in-progress .state-icon,.ngx-button.success .state-icon{position:absolute;display:inline-block;top:50%;left:50%;transform:translate(-50%,-50%)}.ngx-button.fail .state-icon .icon,.ngx-button.in-progress .state-icon .icon,.ngx-button.success .state-icon .icon{height:1em;width:1em;font-weight:700;color:#fff;overflow:hidden;font-size:1em}"]
            },] }
];
ButtonComponent.propDecorators = {
    promise: [{ type: Input }],
    disabled: [{ type: Input }],
    state: [{ type: Input }],
    timeout: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,