import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Input, Renderer2, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { AlignmentTypes } from '../../utils/position/alignment-types.enum';
import { PlacementTypes } from '../../utils/position/placement-type.enum';
import { positionContent } from '../../utils/position/position-content/position-content.util';
import { positionCaret } from '../../utils/position/position-caret/position-caret.util';
import { determinePlacement } from '../../utils/position/determine-placement/determine-placement.util';
import { throttleable } from '../../decorators/throttleable/throttleable.decorator';
import { StyleTypes } from './style-types.enum';
export class TooltipContentComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    get showCaret() {
        return this._showCaret;
    }
    set showCaret(val) {
        this._showCaret = coerceBooleanProperty(val);
    }
    get spacing() {
        return this._spacing;
    }
    set spacing(val) {
        this._spacing = coerceNumberProperty(val);
    }
    get cssClasses() {
        let clz = 'ngx-tooltip-content';
        clz += ` position-${this.placement}`;
        clz += ` type-${this.type}`;
        clz += ` ${this.cssClass}`;
        return clz;
    }
    ngAfterViewInit() {
        setTimeout(this.position.bind(this));
    }
    onWindowResize() {
        this.position();
    }
    position() {
        const nativeElm = this.element.nativeElement;
        const hostDim = this.host.nativeElement.getBoundingClientRect();
        // if no dims were found, never show
        if (!hostDim.height && !hostDim.width)
            return;
        const elmDim = nativeElm.getBoundingClientRect();
        this.checkFlip(hostDim, elmDim);
        this.positionContent(nativeElm, hostDim, elmDim);
        if (this.showCaret) {
            this.positionCaret(hostDim, elmDim);
        }
        // animate its entry
        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);
    }
    positionContent(nativeElm, hostDim, elmDim) {
        const { top, left } = positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);
        this.renderer.setStyle(nativeElm, 'top', `${top}px`);
        this.renderer.setStyle(nativeElm, 'left', `${left}px`);
    }
    positionCaret(hostDim, elmDim) {
        const caretElm = this.caretElm.nativeElement;
        const caretDimensions = caretElm.getBoundingClientRect();
        const { top, left } = positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);
        this.renderer.setStyle(caretElm, 'top', `${top}px`);
        this.renderer.setStyle(caretElm, 'left', `${left}px`);
    }
    checkFlip(hostDim, elmDim) {
        this.placement = determinePlacement(this.placement, elmDim, hostDim, this.spacing, this.alignment);
    }
}
TooltipContentComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'ngxTooltipContent',
                selector: 'ngx-tooltip-content',
                template: "<div>\n  <span\n    #caretElm\n    class=\"tooltip-caret\"\n    [ngClass]=\"'position-' + placement\"\n    [hidden]=\"!showCaret\"\n  ></span>\n  <div class=\"tooltip-content\">\n    <span *ngIf=\"!title\">\n      <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n    </span>\n    <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".ngx-tooltip-content{position:fixed;z-index:5000;display:block;font-weight:400;opacity:0}.ngx-tooltip-content.type-popover{background:#afb7c8;color:#313847;border:1px solid transparet;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 3px 3px -2px rgba(0,0,0,.12);font-size:13px;padding:10px}.ngx-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #afb7c8}.ngx-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #afb7c8}.ngx-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #afb7c8}.ngx-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #afb7c8}.ngx-tooltip-content.type-tooltip{color:#313847;background:#afb7c8;font-size:12px;padding:4px;text-align:center}.ngx-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #afb7c8}.ngx-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #afb7c8}.ngx-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #afb7c8}.ngx-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #afb7c8}.ngx-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-tooltip-content.position-right{transform:translate3d(10px,0,0)}.ngx-tooltip-content.position-left{transform:translate3d(-10px,0,0)}.ngx-tooltip-content.position-top{transform:translate3d(0,-10px,0)}.ngx-tooltip-content.position-bottom{transform:translate3d(0,10px,0)}.ngx-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translateZ(0)}.ngx-tooltip-content.narrow{max-width:300px}"]
            },] }
];
TooltipContentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipContentComponent.propDecorators = {
    caretElm: [{ type: ViewChild, args: ['caretElm', { static: true },] }],
    host: [{ type: Input }],
    type: [{ type: Input }],
    placement: [{ type: Input }],
    alignment: [{ type: Input }],
    cssClass: [{ type: Input }],
    title: [{ type: Input }],
    template: [{ type: Input }],
    context: [{ type: Input }],
    showCaret: [{ type: Input }],
    spacing: [{ type: Input }],
    cssClasses: [{ type: HostBinding, args: ['class',] }],
    onWindowResize: [{ type: HostListener, args: ['window:resize',] }]
};
__decorate([
    throttleable(100),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TooltipContentComponent.prototype, "onWindowResize", null);
//# sourceMappingURL=data:application/json;base64,