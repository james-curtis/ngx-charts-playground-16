import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';
import { ObjectNode } from '../../../../node-types/object-node.component';
export class ObjectNodeComponent extends ObjectNode {
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
        this.isDuplicated = false;
    }
}
ObjectNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-json-object-node',
                template: "<div [hidden]=\"!expanded\">\n  <div *ngFor=\"let prop of propertyIndex | objectValues; trackBy: trackBy\">\n    <div class=\"property-def\" [class.invalid]=\"duplicatedFields.has(prop.id)\">\n      <ngx-dropdown [showCaret]=\"true\">\n        <ngx-dropdown-toggle>\n          <div class=\"type-icon\">\n            <ngx-icon [fontIcon]=\"prop.$meta.icon\"></ngx-icon>\n          </div>\n        </ngx-dropdown-toggle>\n        <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline\">\n          <ul class=\"vertical-list\">\n            <li>\n              <button\n                type=\"button\"\n                (click)=\"deleteProperty(prop.propertyName)\"\n                [disabled]=\"requiredCache[prop.propertyName]\"\n              >\n                Delete\n              </button>\n            </li>\n            <ng-container *ngIf=\"prop?.$meta?.type\">\n              <li *ngFor=\"let type of prop?.$meta?.type\">\n                <button\n                  type=\"button\"\n                  (click)=\"changePropertyType(prop, type)\"\n                  [disabled]=\"prop.$meta.currentType === type\"\n                >\n                  Change type to {{ dataTypeMap[type].name }}\n                </button>\n              </li>\n            </ng-container>\n          </ul>\n        </ngx-dropdown-menu>\n      </ngx-dropdown>\n\n      <div class=\"property-name\">\n        <input\n          type=\"text\"\n          *ngIf=\"prop.nameEditable\"\n          [ngModel]=\"prop.propertyName\"\n          (ngModelChange)=\"updatePropertyName(prop.id, $event)\"\n        />\n\n        <ng-container *ngIf=\"!prop?.nameEditable\">\n          <div class=\"title\" ngx-tooltip [tooltipTitle]=\"prop?.description ? prop?.description : prop?.propertyName\">\n            {{ prop?.title ? prop?.title : prop?.propertyName }}\n            <span *ngIf=\"requiredCache[prop.propertyName]\">*</span>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n    <ngx-json-editor-node\n      [model]=\"model[prop.propertyName]\"\n      (modelChange)=\"updateProp(prop.id, $event)\"\n      [schema]=\"prop\"\n      [required]=\"!!requiredCache[prop.propertyName]\"\n      [inline]=\"prop.type !== 'array' && prop.type !== 'object'\"\n      [path]=\"path + getPath(prop.propertyName)\"\n      [isDuplicated]=\"duplicatedFields.has(prop.id)\"\n      [errors]=\"errors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [showKnownProperties]=\"showKnownProperties\"\n    >\n    </ngx-json-editor-node>\n  </div>\n\n  <ngx-dropdown [showCaret]=\"true\">\n    <ngx-dropdown-toggle [disabled]=\"isDuplicated\">\n      <div class=\"add-button\">\n        <ngx-icon fontIcon=\"plus-bold\"></ngx-icon>\n      </div>\n    </ngx-dropdown-toggle>\n    <ngx-dropdown-menu class=\"ngx-dropdown-dark-outline\">\n      <ul class=\"vertical-list dropdown-column\" *ngIf=\"schema.properties\">\n        <li *ngFor=\"let prop of schema.properties | keyvalue\" (click)=\"addSchemaProperty(prop.key)\">\n          <button [disabled]=\"model[prop.key] !== undefined\" type=\"button\">\n            {{ prop.value.title ? prop.value.title : prop.key }}\n          </button>\n        </li>\n      </ul>\n      <ul\n        class=\"vertical-list dropdown-column\"\n        *ngIf=\"!schema || schema.patternProperties || schema.additionalProperties !== false\"\n      >\n        <li *ngFor=\"let prop of schema.patternProperties | keyvalue\" (click)=\"addSchemaPatternProperty(prop.key)\">\n          <button type=\"button\">{{ prop.value.title ? prop.value.title : prop.key }}</button>\n        </li>\n        <ng-template [ngIf]=\"!schema || schema.additionalProperties !== false\">\n          <li *ngFor=\"let dataType of dataTypes\" (click)=\"addProperty(dataType)\">\n            <button type=\"button\">{{ dataType.name }}</button>\n          </li>\n        </ng-template>\n      </ul>\n    </ngx-dropdown-menu>\n  </ngx-dropdown>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".invalid{border:1px solid #e02f00}"]
            },] }
];
ObjectNodeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ObjectNodeComponent.propDecorators = {
    isDuplicated: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LW5vZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3dpbWxhbmUvbmd4LXVpL3NyYy9saWIvY29tcG9uZW50cy9qc29uLWVkaXRvci9qc29uLWVkaXRvci9qc29uLWVkaXRvci1ub2RlL25vZGUtdHlwZXMvb2JqZWN0LW5vZGUvb2JqZWN0LW5vZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQVExRSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsVUFBVTtJQUdqRCxZQUFzQixHQUFzQjtRQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEUyxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUZuQyxpQkFBWSxHQUFHLEtBQUssQ0FBQztJQUk5QixDQUFDOzs7WUFYRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsazNIQUF5QztnQkFFekMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7WUFSNEMsaUJBQWlCOzs7MkJBVTNELEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9iamVjdE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ub2RlLXR5cGVzL29iamVjdC1ub2RlLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1qc29uLW9iamVjdC1ub2RlJyxcbiAgdGVtcGxhdGVVcmw6ICdvYmplY3Qtbm9kZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydvYmplY3Qtbm9kZS5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBPYmplY3ROb2RlQ29tcG9uZW50IGV4dGVuZHMgT2JqZWN0Tm9kZSB7XG4gIEBJbnB1dCgpIGlzRHVwbGljYXRlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoY2RyKTtcbiAgfVxufVxuIl19