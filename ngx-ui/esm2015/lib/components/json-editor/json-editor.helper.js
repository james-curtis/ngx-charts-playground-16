export const requiredIndicatorIcon = `
  <svg width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3.38411 10L2.19205 9.10616L3.89073 6.2089L1 4.97603L1.44702 3.55822L4.48676 4.32877L4.75497 1H6.21523L6.48344 4.29795L9.55298 3.55822L10 4.97603L7.10927 6.2089L8.77815 9.10616L7.61589 10L5.5 7.34931L3.38411 10Z" fill="#72819F" stroke="#72819F" stroke-width="0.5"/>
  </svg>`;
export const propTypes = ['null', 'string', 'number', 'integer', 'boolean', 'object', 'array'];
const ɵ0 = () => '', ɵ1 = (value) => {
    return typeof value === 'string';
}, ɵ2 = () => 0, ɵ3 = (value) => {
    return typeof value === 'number';
}, ɵ4 = () => 0, ɵ5 = (value) => {
    return typeof value === 'number';
}, ɵ6 = () => true, ɵ7 = (value) => {
    return typeof value === 'boolean';
}, ɵ8 = () => JSON.parse(JSON.stringify({})), ɵ9 = (value) => {
    return typeof value === 'object';
}, ɵ10 = () => JSON.parse(JSON.stringify([])), ɵ11 = (value) => {
    return Array.isArray(value);
}, ɵ12 = () => null, ɵ13 = (value) => {
    // NOTE: because of the way type inference is implemented, we need
    // to check for 'null' AFTER we check for 'object', since
    // typeof null === 'object'
    return value === null;
};
export const jsonSchemaDataTypes = [
    {
        name: 'String',
        defaultValue: ɵ0,
        schema: {
            type: 'string'
        },
        icon: 'field-text',
        matchType: ɵ1
    },
    {
        name: 'Number',
        defaultValue: ɵ2,
        schema: {
            type: 'number'
        },
        icon: 'field-numeric',
        matchType: ɵ3
    },
    {
        name: 'Integer',
        defaultValue: ɵ4,
        schema: {
            type: 'integer'
        },
        icon: 'field-numeric',
        matchType: ɵ5
    },
    {
        name: 'Boolean',
        defaultValue: ɵ6,
        schema: {
            type: 'boolean'
        },
        icon: 'check-square-filled',
        matchType: ɵ7
    },
    {
        name: 'Object',
        defaultValue: ɵ8,
        schema: {
            type: 'object'
        },
        icon: 'reference-tree',
        matchType: ɵ9
    },
    {
        name: 'Array',
        defaultValue: ɵ10,
        schema: {
            type: 'array'
        },
        icon: 'integrations',
        matchType: ɵ11
    },
    {
        name: 'Null',
        defaultValue: ɵ12,
        schema: {
            type: 'null'
        },
        icon: 'disable',
        matchType: ɵ13
    }
];
const ɵ14 = () => '', ɵ15 = () => {
    return false; // needs to be overriden
}, ɵ16 = () => '', ɵ17 = () => {
    return false; // needs to be overriden
}, ɵ18 = () => '', ɵ19 = () => {
    return false; // needs to be overriden
}, ɵ20 = () => '', ɵ21 = () => {
    return false; // needs to be overriden
};
export const jsonSchemaDataFormats = [
    {
        name: 'Date',
        defaultValue: ɵ14,
        schema: {
            type: 'string',
            format: 'date'
        },
        icon: 'field-date',
        matchType: ɵ15
    },
    {
        name: 'Date & Time',
        defaultValue: ɵ16,
        schema: {
            type: 'string',
            format: 'date-time'
        },
        icon: 'field-date',
        matchType: ɵ17
    },
    {
        name: 'Password',
        defaultValue: ɵ18,
        schema: {
            type: 'string',
            format: 'password'
        },
        icon: 'lock',
        matchType: ɵ19
    },
    {
        name: 'Code',
        defaultValue: ɵ20,
        schema: {
            type: 'string',
            format: 'code'
        },
        icon: 'code',
        matchType: ɵ21
    }
];
export const dataTypeMap = {};
for (const dType of [...jsonSchemaDataTypes, ...jsonSchemaDataFormats]) {
    let key = dType.schema.type;
    if (dType.schema.format) {
        key = `${key}=${dType.schema.format}`;
    }
    dataTypeMap[key] = dType;
}
export function createValueForSchema(schema) {
    if (schema.default) {
        return schema.default;
    }
    if (schema.type) {
        return dataTypeMap[schema.type].defaultValue();
    }
}
/**
 * Infers the schema type of the value
 *
 * @param value the value to infer the schema for
 * @param overrides an object with overridden inference functions for various schema types
 * @param allowedTypes the allowed schema types to consider
 */
export function inferType(value, overrides, allowedTypes) {
    if (overrides) {
        for (const typeName in overrides) {
            if (allowedTypes !== undefined && !allowedTypes.includes(typeName)) {
                continue;
            }
            // eslint-disable-next-line
            if (dataTypeMap[typeName] && overrides[typeName](value)) {
                return dataTypeMap[typeName].schema;
            }
        }
    }
    let type;
    for (const typeName in dataTypeMap) {
        if (allowedTypes !== undefined && !allowedTypes.includes(typeName)) {
            continue;
        }
        if (dataTypeMap[typeName].matchType(value)) {
            type = dataTypeMap[typeName].schema;
        }
    }
    if (!type) {
        type = dataTypeMap.object.schema;
    }
    return type;
}
/**
 * Returns the icon for the schema
 */
export function getIcon(schema) {
    let key = schema.type;
    if (schema.format) {
        key = `${key}=${schema.format}`;
    }
    if (dataTypeMap[key]) {
        return dataTypeMap[key].icon;
    }
    return 'integration';
}
/**
 * Returns a string for the schema.$meta.currentType property in the following format:
 * string, string=code, object, etc.
 *
 * @param schema
 */
export function getCurrentType(schema) {
    if (schema.type !== 'string') {
        return schema.type;
    }
    if (schema.format) {
        return `string=${schema.format}`;
    }
    else {
        return 'string';
    }
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17, ɵ18, ɵ19, ɵ20, ɵ21 };
//# sourceMappingURL=data:application/json;base64,