import { Component, ContentChildren, QueryList, Input, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { JsonEditorNodeFlatComponent } from './json-editor-node-flat/json-editor-node-flat.component';
import { SchemaValidatorService } from '../schema-validator.service';
import { JsonEditor } from '../json-editor';
import { jsonSchemaDataFormats } from '../json-editor.helper';
import { DialogService } from '../../dialog/dialog.service';
export class JsonEditorFlatComponent extends JsonEditor {
    constructor(dialogService, schemaValidatorService, cdr) {
        super(schemaValidatorService, cdr);
        this.dialogService = dialogService;
        this.schemaValidatorService = schemaValidatorService;
        this.cdr = cdr;
        this.schemaBuilderMode = false;
        this.formats = [];
        this.compressed = false;
        this.hideRoot = false;
        this.showKnownProperties = false;
        this.customFormats = [];
    }
    ngOnInit() {
        if (this.formats.length && this.schemaBuilderMode) {
            this.buildCustomFormats();
        }
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.schema) {
            this.schemaRef = JSON.parse(JSON.stringify(this.schema));
        }
    }
    onPropertyConfig() {
        this.dialogService.create({
            template: this.propertyConfigTmpl,
            context: {
                property: this.schema,
                schema: this.schema,
                formats: this.customFormats
            },
            class: 'property-config-dialog'
        });
    }
    updateSchema(options) {
        const editedSchema = options.newProperty;
        if (editedSchema.title) {
            this.schema.title = editedSchema.title;
            this.schemaRef.title = editedSchema.title;
        }
        else {
            delete this.schema.title;
            delete this.schemaRef.title;
        }
        if (editedSchema.description) {
            this.schema.description = editedSchema.description;
            this.schemaRef.description = editedSchema.description;
        }
        else {
            delete this.schema.description;
            delete this.schemaRef.description;
        }
        this.schema = Object.assign({}, this.schema);
        this.schemaRef = Object.assign({}, this.schemaRef);
        this.schemaUpdate.emit(this.schemaRef);
    }
    buildCustomFormats() {
        this.formats.forEach(format => {
            const found = jsonSchemaDataFormats.find((dataFormat) => {
                return dataFormat.schema.format === format;
            });
            if (found) {
                this.customFormats.push(found);
            }
            else {
                this.customFormats.push({
                    name: format.charAt(0).toUpperCase() + format.slice(1),
                    defaultValue: () => '',
                    schema: {
                        type: 'string',
                        format
                    },
                    icon: 'field-text',
                    matchType: () => {
                        return false;
                    }
                });
            }
        });
    }
}
JsonEditorFlatComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-json-editor-flat',
                template: "<div class=\"ngx-json-editor-flat\">\n  <ngx-json-editor-node-flat\n    [(model)]=\"model\"\n    [schema]=\"schema\"\n    [hideRoot]=\"hideRoot\"\n    [schemaRef]=\"schemaRef\"\n    (modelChange)=\"modelChangedCallback($event)\"\n    [errors]=\"errors\"\n    [typeCheckOverrides]=\"typeCheckOverrides\"\n    [label]=\"label\"\n    [compressed]=\"compressed\"\n    [formats]=\"customFormats\"\n    [schemaBuilderMode]=\"schemaBuilderMode\"\n    [showKnownProperties]=\"showKnownProperties\"\n    (schemaUpdate)=\"schemaUpdate.emit($event)\"\n  >\n    <div class=\"node-options\" node-options>\n      <button *ngIf=\"schemaBuilderMode\" type=\"button\" class=\"node-options-btn\" (click)=\"onPropertyConfig()\">\n        <i class=\"ngx-icon ngx-cog\"></i>\n      </button>\n    </div>\n  </ngx-json-editor-node-flat>\n</div>\n\n<!-- Property Config Dialog -->\n<ng-template #propertyConfigTmpl let-context=\"context\">\n  <ngx-property-config\n    [property]=\"context.property\"\n    [schema]=\"context.schema\"\n    [formats]=\"context.formats\"\n    [rootItem]=\"true\"\n    (updateSchema)=\"updateSchema($event)\"\n  >\n  </ngx-property-config>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".ngx-json-editor-flat{position:relative;width:100%}.ngx-json-editor-flat .node-options{flex:0 0 80px}.ngx-json-editor-flat .node-options .node-options-btn{color:#72819f;padding:1px 3px 2px}.ngx-json-editor-flat .node-options .ngx-dropdown{margin-left:10px}.property-config-dialog .ngx-dialog-content{padding:0!important;min-width:500px!important}"]
            },] }
];
JsonEditorFlatComponent.ctorParameters = () => [
    { type: DialogService },
    { type: SchemaValidatorService },
    { type: ChangeDetectorRef }
];
JsonEditorFlatComponent.propDecorators = {
    model: [{ type: Input }],
    schema: [{ type: Input }],
    typeCheckOverrides: [{ type: Input }],
    schemaBuilderMode: [{ type: Input }],
    formats: [{ type: Input }],
    compressed: [{ type: Input }],
    hideRoot: [{ type: Input }],
    showKnownProperties: [{ type: Input }],
    nodeElms: [{ type: ContentChildren, args: [JsonEditorNodeFlatComponent,] }],
    propertyConfigTmpl: [{ type: ViewChild, args: ['propertyConfigTmpl',] }]
};
//# sourceMappingURL=data:application/json;base64,