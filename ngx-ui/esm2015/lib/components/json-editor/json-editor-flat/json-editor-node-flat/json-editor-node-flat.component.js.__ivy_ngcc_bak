import { Component, Input, ViewEncapsulation, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { JsonEditorNode } from '../../json-editor-node';
import { DialogService } from '../../../dialog/dialog.service';
import { DomSanitizer } from '@angular/platform-browser';
import { requiredIndicatorIcon } from '../../json-editor.helper';
export class JsonEditorNodeFlatComponent extends JsonEditorNode {
    constructor(dialogMngr, domSanitizer) {
        super(dialogMngr);
        this.dialogMngr = dialogMngr;
        this.domSanitizer = domSanitizer;
        this.arrayItem = false;
        this.hideRoot = false;
        this.arrayName = '';
        this.showKnownProperties = false;
        this.isDuplicated = false;
        this.updatePropertyNameEvent = new EventEmitter();
        this.nextLevel = 0;
        this.requiredIndicator = this.domSanitizer.bypassSecurityTrustHtml(requiredIndicatorIcon);
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if ('level' in changes || 'hideRoot' in changes) {
            this.nextLevel = this.level === undefined ? (this.hideRoot ? -1 : 0) : this.level + 1;
        }
    }
    updatePropertyName(id, name) {
        this.updatePropertyNameEvent.emit({ id, name });
    }
}
JsonEditorNodeFlatComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-json-editor-node-flat',
                template: "<div *ngIf=\"model !== undefined\" class=\"json-tree-node-flat\">\n  <div class=\"node-container\" *ngIf=\"!(nextLevel === -1 && hideRoot)\">\n    <div class=\"indentation\" *ngIf=\"nextLevel > 0\" [style.left]=\"-1 * (nextLevel * 20) + 'px'\">\n      <span class=\"json-editor--vertical-separator\" *ngFor=\"let separator of indentationArray\"></span>\n    </div>\n    <div class=\"node\" [class.compressed]=\"compressed\">\n      <div class=\"error-box\" *ngIf=\"(!valid && !schemaBuilderMode) || isDuplicated\"></div>\n\n      <div class=\"left-options\">\n        <ng-container *ngIf=\"hideRoot || (nextLevel > 0 && !arrayItem)\">\n          <div class=\"required-indicator\">\n            <span\n              *ngIf=\"required\"\n              [class.invalid]=\"(!childrenValid && !schemaBuilderMode) || isDuplicated\"\n              [innerHtml]=\"requiredIndicator\"\n            ></span>\n            <span *ngIf=\"!required && schemaBuilderMode\" class=\"not-required\" [innerHtml]=\"requiredIndicator\"></span>\n          </div>\n          <ng-content select=\"[cdkDragHandle]\"></ng-content>\n        </ng-container>\n      </div>\n\n      <div class=\"node-content\" [class.extra-margin]=\"schema.nameEditable && !schemaBuilderMode\">\n        <div class=\"node-info\">\n          <ngx-json-editor-node-info\n            [nameEditable]=\"schema.nameEditable && !schemaBuilderMode\"\n            [propertyName]=\"arrayName ? arrayName : schema?.propertyName\"\n            (propertyNameChange)=\"updatePropertyName(schema.id, $event)\"\n            [title]=\"schema?.title || label || (arrayItem ? 'Items' : schema?.propertyName)\"\n            [type]=\"(schema?.format || schema?.type | titlecase) + (schema?.enum?.length ? ' + Enum' : '')\"\n            [description]=\"schema?.description\"\n            [examples]=\"schema?.examples\"\n            [compressed]=\"compressed\"\n          >\n          </ngx-json-editor-node-info>\n        </div>\n\n        <div *ngIf=\"!schemaBuilderMode\" class=\"node-input\">\n          <!-- Number | Integer -->\n          <div *ngIf=\"schema?.type === 'number' || schema?.type === 'integer'\">\n            <ngx-input\n              type=\"number\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [requiredIndicator]=\"false\"\n              [required]=\"required\"\n              [disabled]=\"isDuplicated\"\n            ></ngx-input>\n          </div>\n\n          <!-- Boolean -->\n          <div *ngIf=\"schema?.type === 'boolean'\">\n            <ngx-toggle\n              class=\"toggle-input\"\n              [ngModel]=\"model\"\n              (ngModelChange)=\"updateModel($event)\"\n              [label]=\"model | json\"\n              [disabled]=\"isDuplicated\"\n            >\n            </ngx-toggle>\n          </div>\n\n          <!-- String -->\n          <ng-container *ngIf=\"schema?.type === 'string'\">\n            <!-- No format -->\n            <div *ngIf=\"!schema.format\">\n              <ngx-input\n                *ngIf=\"!schema?.enum\"\n                type=\"textarea\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"isDuplicated\"\n                [autosize]=\"false\"\n              >\n              </ngx-input>\n\n              <ngx-select\n                [filterable]=\"false\"\n                *ngIf=\"schema?.enum\"\n                [ngModel]=\"[model]\"\n                (ngModelChange)=\"updateModel($event[0])\"\n                [required]=\"required\"\n                [disabled]=\"isDuplicated\"\n              >\n                <ngx-select-option *ngFor=\"let option of schema.enum\" [name]=\"option\" [value]=\"option\">\n                </ngx-select-option>\n              </ngx-select>\n            </div>\n\n            <!-- Password -->\n            <div *ngIf=\"schema.format === 'password'\">\n              <ngx-input\n                type=\"password\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"isDuplicated\"\n              ></ngx-input>\n            </div>\n\n            <!-- Date -->\n            <div *ngIf=\"schema.format === 'date'\">\n              <ngx-input\n                type=\"date\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"isDuplicated\"\n              ></ngx-input>\n            </div>\n\n            <!-- DateTime -->\n            <div *ngIf=\"schema.format === 'date-time'\">\n              <ngx-input\n                type=\"datetime-local\"\n                [ngModel]=\"model\"\n                (ngModelChange)=\"updateModel($event)\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"isDuplicated\"\n              ></ngx-input>\n            </div>\n\n            <!-- Code -->\n            <div *ngIf=\"schema.format === 'code'\" class=\"code\">\n              <ngx-input\n                type=\"text\"\n                [ngModel]=\"model\"\n                [requiredIndicator]=\"false\"\n                [required]=\"required\"\n                [disabled]=\"true\"\n              >\n                <ngx-input-suffix>\n                  <button [disabled]=\"isDuplicated\" (click)=\"openCodeEditor()\">\n                    <ngx-icon fontIcon=\"edit\" class=\"edit-code-icon\" ngx-tooltip tooltipTitle=\"Edit Code\"> </ngx-icon>\n                  </button>\n                </ngx-input-suffix>\n              </ngx-input>\n            </div>\n\n            <ng-template #codeEditorTpl>\n              <div class=\"code-editor\">\n                <ngx-select\n                  label=\"Language Mode\"\n                  [ngModel]=\"[editorConfig.mode.name]\"\n                  (ngModelChange)=\"selectEditorMode($event[0])\"\n                >\n                  <ngx-select-option *ngFor=\"let mode of editorModes\" [name]=\"mode.label\" [value]=\"mode.name\">\n                  </ngx-select-option>\n                </ngx-select>\n\n                <ngx-button\n                  class=\"btn btn-primary save-code-button\"\n                  (click)=\"updateModel(editorModel); closeCodeEditor()\"\n                >\n                  Save</ngx-button\n                >\n\n                <ngx-codemirror\n                  *ngIf=\"editorVisible\"\n                  [ngModel]=\"editorModel\"\n                  (ngModelChange)=\"editorModel = $event\"\n                  [config]=\"editorConfig\"\n                  class=\"code-editor\"\n                >\n                </ngx-codemirror>\n              </div>\n            </ng-template>\n          </ng-container>\n\n          <div class=\"input-error\">\n            <span *ngFor=\"let error of ownErrors\">{{ error.message }}</span>\n          </div>\n        </div>\n\n        <div *ngIf=\"schemaBuilderMode\" class=\"node-constrains\">\n          <div class=\"tag\" *ngIf=\"schema.minItems\">Min Items: {{ schema.minItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxItems\">Max Items: {{ schema.maxItems }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minimum\">Minimum: {{ schema.minimum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maximum\">Maximum: {{ schema.maximum }}</div>\n          <div class=\"tag\" *ngIf=\"schema.minLength\">Min Length: {{ schema.minLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.maxLength\">Max Length: {{ schema.maxLength }}</div>\n          <div class=\"tag\" *ngIf=\"schema.pattern\">Pattern: Yes</div>\n        </div>\n        <ng-content select=\"[node-options]\"></ng-content>\n      </div>\n    </div>\n  </div>\n\n  <!-- Object -->\n  <div *ngIf=\"schema?.type === 'object'\">\n    <ngx-json-object-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [errors]=\"childrenErrors\"\n      [isDuplicated]=\"isDuplicated\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"nextLevel\"\n      [compressed]=\"compressed\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      [formats]=\"formats\"\n      [showKnownProperties]=\"showKnownProperties\"\n      (schemaUpdate)=\"schemaUpdate.emit(schemaRef)\"\n    >\n    </ngx-json-object-node-flat>\n  </div>\n\n  <!-- Array -->\n  <div *ngIf=\"schema?.type === 'array'\">\n    <ngx-json-array-node-flat\n      [schema]=\"schema\"\n      [schemaRef]=\"schemaRef\"\n      [model]=\"model\"\n      [expanded]=\"expanded\"\n      [formats]=\"formats\"\n      [hideRoot]=\"hideRoot\"\n      (modelChange)=\"updateModel($event)\"\n      [path]=\"path\"\n      [compressed]=\"compressed\"\n      [errors]=\"childrenErrors\"\n      [typeCheckOverrides]=\"typeCheckOverrides\"\n      [level]=\"nextLevel\"\n      [isDuplicated]=\"isDuplicated\"\n      [schemaBuilderMode]=\"schemaBuilderMode\"\n      [showKnownProperties]=\"showKnownProperties\"\n      (schemaUpdate)=\"schemaUpdate.emit(schemaRef)\"\n    >\n    </ngx-json-array-node-flat>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".json-tree-node-flat .indentation{border-radius:2px 0 0 2px;display:flex;align-items:center;background-color:rgba(49,56,71,.4)}.json-editor--vertical-separator{background-color:#3b4457;opacity:.5;border-radius:2px;width:1px;height:calc(100% - 4px);margin-right:20px}.json-editor--vertical-separator:first-child{margin-left:20px}.json-editor--popover-template{font-weight:600;font-size:12px;line-height:13px;max-width:300px;color:#1c2029}.json-editor--popover-template .label{color:#505c75;font-size:10px;font-weight:700;text-transform:uppercase}.json-editor--popover-template .separator{height:8px;background:transparent}ngx-json-editor-node-flat{max-width:100%}.json-tree-node-flat .indentation{flex:1 0 20px}.json-tree-node-flat .node-container{display:flex}.json-tree-node-flat .node{background-color:#313847;box-shadow:0 2px 7px rgba(0,0,0,.2);border-radius:2px;display:flex;padding:25px 10px;position:relative;flex:0 1 100%;height:120px;min-width:0}.json-tree-node-flat .node.compressed{height:80px}.json-tree-node-flat .node .error-box{position:absolute;width:100%;height:100%;border-radius:2px;top:0;left:0;border:2px solid #ff4514}.json-tree-node-flat .node .left-options{display:flex;flex-direction:column;justify-content:center;margin-right:10px;color:#72819f;flex:0 0 15px}.json-tree-node-flat .node .left-options .required-indicator{position:absolute;top:12px;left:12px}.json-tree-node-flat .node .left-options .required-indicator span{display:flex}.json-tree-node-flat .node .left-options .required-indicator span svg path{fill:#72819f;stroke:#72819f}.json-tree-node-flat .node .left-options .required-indicator span.not-required svg path{fill:transparent}.json-tree-node-flat .node .left-options .required-indicator span.invalid svg path{fill:#ff4514;stroke:#ff4514}.json-tree-node-flat .node .left-options .drag-drop-handle{cursor:-webkit-grab;cursor:grab}.json-tree-node-flat .node .node-content{display:flex;justify-content:space-between;flex:0 0 100%;align-items:center;min-width:0}.json-tree-node-flat .node .node-content.extra-margin{margin-top:-15px}.json-tree-node-flat .node .node-content .node-info{flex:0 0 40%;padding-right:25px;overflow:hidden}.json-tree-node-flat .node .node-content .node-input{flex:0 1 60%;padding-top:1em}.json-tree-node-flat .node .node-content .node-input ngx-input{padding:0;margin:0}.json-tree-node-flat .node .node-content .node-input ngx-input .ngx-input-hint{min-height:0}.json-tree-node-flat .node .node-content .node-input .code:hover button{display:inline}.json-tree-node-flat .node .node-content .node-input .code input{color:#cdd2dd}.json-tree-node-flat .node .node-content .node-input .code button{display:none;color:#72819f}.json-tree-node-flat .node .node-content .node-input .input-error{color:#ff4514;min-height:1.2em}"]
            },] }
];
JsonEditorNodeFlatComponent.ctorParameters = () => [
    { type: DialogService },
    { type: DomSanitizer }
];
JsonEditorNodeFlatComponent.propDecorators = {
    model: [{ type: Input }],
    schema: [{ type: Input }],
    typeCheckOverrides: [{ type: Input }],
    errors: [{ type: Input }],
    label: [{ type: Input }],
    level: [{ type: Input }],
    schemaBuilderMode: [{ type: Input }],
    schemaRef: [{ type: Input }],
    formats: [{ type: Input }],
    arrayItem: [{ type: Input }],
    hideRoot: [{ type: Input }],
    arrayName: [{ type: Input }],
    compressed: [{ type: Input }],
    indentationArray: [{ type: Input }],
    showKnownProperties: [{ type: Input }],
    isDuplicated: [{ type: Input }],
    updatePropertyNameEvent: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N3aW1sYW5lL25neC11aS9zcmMvbGliL2NvbXBvbmVudHMvanNvbi1lZGl0b3IvanNvbi1lZGl0b3ItZmxhdC9qc29uLWVkaXRvci1ub2RlLWZsYXQvanNvbi1lZGl0b3Itbm9kZS1mbGF0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFFTCxpQkFBaUIsRUFDakIsWUFBWSxFQUNaLE1BQU0sRUFDTix1QkFBdUIsRUFHeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUF3QyxNQUFNLDBCQUEwQixDQUFDO0FBU3ZHLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxjQUFjO0lBdUM3RCxZQUFtQixVQUF5QixFQUFVLFlBQTBCO1FBQzlFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQURELGVBQVUsR0FBVixVQUFVLENBQWU7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQXBCdkUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVsQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFNZix3QkFBbUIsR0FBRyxLQUFLLENBQUM7UUFFNUIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFFcEIsNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQXlDLENBQUM7UUFJOUYsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUlaLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksT0FBTyxFQUFFO1lBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUN2RjtJQUNILENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxFQUFtQixFQUFFLElBQVk7UUFDbEQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7OztZQTVERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsMnlTQUFxRDtnQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7O1lBVlEsYUFBYTtZQUNiLFlBQVk7OztvQkFXbEIsS0FBSztxQkFFTCxLQUFLO2lDQUVMLEtBQUs7cUJBRUwsS0FBSztvQkFFTCxLQUFLO29CQUVMLEtBQUs7Z0NBRUwsS0FBSzt3QkFFTCxLQUFLO3NCQUVMLEtBQUs7d0JBRUwsS0FBSzt1QkFFTCxLQUFLO3dCQUVMLEtBQUs7eUJBRUwsS0FBSzsrQkFFTCxLQUFLO2tDQUVMLEtBQUs7MkJBRUwsS0FBSztzQ0FFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPbkNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBKc29uRWRpdG9yTm9kZSB9IGZyb20gJy4uLy4uL2pzb24tZWRpdG9yLW5vZGUnO1xuXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vZGlhbG9nL2RpYWxvZy5zZXJ2aWNlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IHJlcXVpcmVkSW5kaWNhdG9ySWNvbiwgSlNPTkVkaXRvclNjaGVtYSwgSnNvblNjaGVtYURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vanNvbi1lZGl0b3IuaGVscGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWpzb24tZWRpdG9yLW5vZGUtZmxhdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9qc29uLWVkaXRvci1ub2RlLWZsYXQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgSnNvbkVkaXRvck5vZGVGbGF0Q29tcG9uZW50IGV4dGVuZHMgSnNvbkVkaXRvck5vZGUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgQElucHV0KCkgc2NoZW1hOiBKU09ORWRpdG9yU2NoZW1hO1xuXG4gIEBJbnB1dCgpIHR5cGVDaGVja092ZXJyaWRlcz86IGFueTtcblxuICBASW5wdXQoKSBlcnJvcnM6IGFueVtdO1xuXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgbGV2ZWw6IG51bWJlcjtcblxuICBASW5wdXQoKSBzY2hlbWFCdWlsZGVyTW9kZT86IGJvb2xlYW47XG5cbiAgQElucHV0KCkgc2NoZW1hUmVmPzogSlNPTkVkaXRvclNjaGVtYTtcblxuICBASW5wdXQoKSBmb3JtYXRzOiBKc29uU2NoZW1hRGF0YVR5cGVbXTtcblxuICBASW5wdXQoKSBhcnJheUl0ZW0gPSBmYWxzZTtcblxuICBASW5wdXQoKSBoaWRlUm9vdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGFycmF5TmFtZSA9ICcnO1xuXG4gIEBJbnB1dCgpIGNvbXByZXNzZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgaW5kZW50YXRpb25BcnJheTogbnVtYmVyW107XG5cbiAgQElucHV0KCkgc2hvd0tub3duUHJvcGVydGllcyA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGlzRHVwbGljYXRlZCA9IGZhbHNlO1xuXG4gIEBPdXRwdXQoKSB1cGRhdGVQcm9wZXJ0eU5hbWVFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBpZDogc3RyaW5nIHwgbnVtYmVyOyBuYW1lOiBzdHJpbmcgfT4oKTtcblxuICByZXF1aXJlZEluZGljYXRvcjogU2FmZUh0bWw7XG5cbiAgbmV4dExldmVsID0gMDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlhbG9nTW5ncjogRGlhbG9nU2VydmljZSwgcHJpdmF0ZSBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgIHN1cGVyKGRpYWxvZ01uZ3IpO1xuICAgIHRoaXMucmVxdWlyZWRJbmRpY2F0b3IgPSB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChyZXF1aXJlZEluZGljYXRvckljb24pO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgIGlmICgnbGV2ZWwnIGluIGNoYW5nZXMgfHwgJ2hpZGVSb290JyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLm5leHRMZXZlbCA9IHRoaXMubGV2ZWwgPT09IHVuZGVmaW5lZCA/ICh0aGlzLmhpZGVSb290ID8gLTEgOiAwKSA6IHRoaXMubGV2ZWwgKyAxO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVByb3BlcnR5TmFtZShpZDogc3RyaW5nIHwgbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVByb3BlcnR5TmFtZUV2ZW50LmVtaXQoeyBpZCwgbmFtZSB9KTtcbiAgfVxufVxuIl19