import { Input, EventEmitter, Output, ChangeDetectorRef, Directive } from '@angular/core';
import { createValueForSchema, jsonSchemaDataTypes, jsonSchemaDataFormats, inferType, dataTypeMap, getIcon, getCurrentType } from '../json-editor.helper';
export class ObjectNode {
    constructor(cdr) {
        this.cdr = cdr;
        this.required = false;
        this.showKnownProperties = false;
        this.modelChange = new EventEmitter();
        this.schemaUpdate = new EventEmitter();
        this.requiredCache = {};
        this.initialized = false;
        this.dataTypes = [...jsonSchemaDataTypes, ...jsonSchemaDataFormats];
        this.propertyCounter = 1;
        this.propertyId = 1;
        this.propertyIndex = {};
        this.duplicatedFields = new Map();
        this.dataTypeMap = dataTypeMap;
    }
    ngOnInit() {
        this.update();
    }
    ngOnChanges(changes) {
        if (changes.model !== undefined || changes.schema !== undefined) {
            this.update();
        }
    }
    update() {
        setTimeout(() => {
            for (const prop in this.schema.properties) {
                if (Array.isArray(this.schema.properties[prop].type) && this.schema.properties[prop].type.length > 0) {
                    if (!this.schema.properties[prop].$meta) {
                        this.schema.properties[prop].$meta = {};
                    }
                    this.schema.properties[prop].$meta.type = [...this.schema.properties[prop].type];
                    if (this.model[prop] !== undefined) {
                        this.schema.properties[prop] = Object.assign(Object.assign({}, this.schema.properties[prop]), inferType(this.model[prop], this.typeCheckOverrides, this.schema.properties[prop].$meta.type));
                    }
                    else {
                        this.schema.properties[prop].type = this.schema.properties[prop].type[0];
                        this.schema.properties[prop].$meta.currentType = getCurrentType(this.schema.properties[prop]);
                    }
                }
            }
            this.updateRequiredCache();
            this.indexProperties();
            this.addRequiredProperties();
            this.updateIcons();
            this.initialized = true;
        });
    }
    /**
     * Updates a property on the model and emits the change event
     *
     * @param propName
     * @param value
     */
    updateProp(id, value) {
        const propName = this.propertyIndex[id].propertyName;
        this.model[propName] = value;
        this.modelChange.emit(this.model);
    }
    /**
     * Updates the name of a property
     *
     * @param id
     * @param name
     */
    updatePropertyName(id, name) {
        const existingPropertyValue = this.model[name];
        const oldName = this.propertyIndex[id].propertyName;
        this.duplicatedFields.delete(id);
        if (existingPropertyValue === undefined) {
            this.model[name] = this.model[oldName];
            this.propertyIndex[id].propertyName = name;
            delete this.model[oldName];
            this.propertyIndex = Object.assign({}, this.propertyIndex);
            this.modelChange.emit(this.model);
        }
        else if (oldName !== name) {
            this.duplicatedFields.set(id, name);
        }
    }
    /**
     * Adds a new property to the model
     */
    addProperty(dataType) {
        const propName = `${dataType.name} ${this.propertyCounter}`;
        this.propertyCounter++;
        const schema = JSON.parse(JSON.stringify(dataType.schema));
        this.model[propName] = createValueForSchema(dataType.schema);
        schema.nameEditable = !this.schemaBuilderMode;
        schema.propertyName = propName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Adds a new property as defined in the schema
     */
    addSchemaProperty(propName) {
        if (this.model[propName] !== undefined) {
            return;
        }
        const schema = JSON.parse(JSON.stringify(this.schema.properties[propName]));
        if (!schema.type) {
            schema.type = 'object';
        }
        const value = createValueForSchema(schema);
        this.model[propName] = value;
        schema.nameEditable = false;
        schema.propertyName = propName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        if (this.initialized) {
            this.modelChange.emit(this.model);
        }
        this.updateIcons();
    }
    /**
     * Adds a new patternProperty as defined in the schema
     */
    addSchemaPatternProperty(propName) {
        const newPropName = `new ${this.schema.patternProperties[propName].title} ${this.propertyCounter}`;
        this.propertyCounter++;
        const schema = JSON.parse(JSON.stringify(this.schema.patternProperties[propName]));
        schema.isPatternProperty = true;
        if (!schema.type) {
            schema.type = 'object';
        }
        const value = createValueForSchema(schema);
        this.model[newPropName] = value;
        schema.nameEditable = true;
        schema.propertyName = newPropName;
        schema.id = this.propertyId++;
        this.propertyIndex[schema.id] = schema;
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Deletes a property
     */
    deleteProperty(propName) {
        delete this.model[propName];
        for (const id in this.propertyIndex) {
            if (this.propertyIndex[id].propertyName === propName) {
                delete this.propertyIndex[id];
                break;
            }
        }
        this.model = Object.assign({}, this.model);
        this.propertyIndex = Object.assign({}, this.propertyIndex);
        this.modelChange.emit(this.model);
    }
    /**
     * Returns the absolute tree path of the property
     */
    getPath(propName) {
        let propSchema;
        for (const id in this.propertyIndex) {
            if (this.propertyIndex[id].propertyName === propName) {
                propSchema = this.propertyIndex[id];
                break;
            }
        }
        if (propSchema.isPatternProperty) {
            return `['${propName}']`;
        }
        return `.${propName}`;
    }
    /**
     * Updates the required cache
     */
    updateRequiredCache() {
        this.requiredCache = {};
        if (this.schema && this.schema.required) {
            for (const prop of this.schema.required) {
                this.requiredCache[prop] = true;
            }
        }
    }
    /**
     * Creates an index out of all the properties in the model
     */
    indexProperties() {
        const props = this.schemaBuilderMode ? this.schemaRef.properties : this.model;
        for (const prop in props) {
            if (this.isIndexed(prop)) {
                continue;
            }
            let schema;
            if (this.schema.properties && this.schema.properties[prop]) {
                schema = JSON.parse(JSON.stringify(this.schema.properties[prop]));
            }
            else {
                let matchesPattern = false;
                if (this.schema.patternProperties) {
                    for (const pattern in this.schema.patternProperties) {
                        // eslint-disable-next-line
                        const patternRegex = new RegExp(pattern);
                        if (patternRegex.test(prop)) {
                            schema = JSON.parse(JSON.stringify(this.schema.patternProperties[pattern]));
                            matchesPattern = true;
                        }
                    }
                }
                if (!matchesPattern) {
                    schema = Object.assign({}, inferType(this.model[prop], this.typeCheckOverrides));
                }
            }
            schema.id = this.propertyId++;
            schema.propertyName = prop;
            this.propertyIndex[schema.id] = schema;
            this.propertyIndex = Object.assign({}, this.propertyIndex);
        }
        for (const id in this.propertyIndex) {
            const schema = this.propertyIndex[id];
            if (this.model[schema.propertyName] === undefined) {
                delete this.propertyIndex[id];
            }
            else {
                const model = this.model[schema.propertyName];
                const { type } = inferType(model);
                if (schema.type !== type) {
                    this.propertyIndex[schema.id].type = type;
                }
            }
        }
        this.propertyIndex = JSON.parse(JSON.stringify(this.propertyIndex));
        this.cdr.markForCheck();
    }
    isIndexed(propertyName) {
        return Object.values(this.propertyIndex).findIndex((s) => s.propertyName === propertyName) !== -1;
    }
    /**
     * Inits the required properties on the model
     */
    addRequiredProperties() {
        if (this.schema && this.schema.properties) {
            for (const propName in this.schema.properties) {
                if (this.model[propName] !== undefined) {
                    continue;
                }
                if (this.requiredCache[propName] || this.schemaBuilderMode) {
                    // List all properties not only required if we are in schema builder mode
                    this.addSchemaProperty(propName);
                }
            }
        }
    }
    /**
     *
     * @param property
     * @param type
     */
    changePropertyType(property, type) {
        const dataType = this.dataTypeMap[type];
        if (dataType) {
            delete property.format;
            property.type = dataType.schema.type;
            if (dataType.schema.format) {
                property.format = dataType.schema.format;
            }
            property.$meta.currentType = getCurrentType(property);
            this.schema.properties[property.propertyName] = Object.assign({}, property);
        }
        const value = createValueForSchema(property);
        this.model[property.propertyName] = value;
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Track By function for the array ittierator
     *
     * @param index
     * @param value
     */
    trackBy(_, value) {
        return value.id;
    }
    /**
     * Updates the icons in the schemas
     */
    updateIcons() {
        for (const id in this.propertyIndex) {
            const schema = this.propertyIndex[id];
            if (!schema.$meta) {
                schema.$meta = {};
            }
            schema.$meta.icon = getIcon(schema);
        }
    }
}
ObjectNode.decorators = [
    { type: Directive }
];
ObjectNode.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ObjectNode.propDecorators = {
    schema: [{ type: Input }],
    model: [{ type: Input }],
    required: [{ type: Input }],
    expanded: [{ type: Input }],
    path: [{ type: Input }],
    errors: [{ type: Input }],
    typeCheckOverrides: [{ type: Input }],
    schemaBuilderMode: [{ type: Input }],
    schemaRef: [{ type: Input }],
    showKnownProperties: [{ type: Input }],
    modelChange: [{ type: Output }],
    schemaUpdate: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,