import { Input, EventEmitter, Output, Directive } from '@angular/core';
import { createValueForSchema, jsonSchemaDataTypes, dataTypeMap, inferType, getIcon, getCurrentType, jsonSchemaDataFormats } from '../json-editor.helper';
export class ArrayNode {
    constructor() {
        this.required = false;
        this.showKnownProperties = false;
        this.modelChange = new EventEmitter();
        this.schemaUpdate = new EventEmitter();
        this.requiredCache = {};
        this.schemas = [];
        this.dataTypes = [...jsonSchemaDataTypes, ...jsonSchemaDataFormats];
        this.dataTypeMap = dataTypeMap;
        this._array = Array;
    }
    ngOnChanges(changes) {
        if (changes.schema) {
            if (this.schema && this.schema.required) {
                for (const prop of this.schema.required) {
                    this.requiredCache[prop] = true;
                }
            }
        }
        this.initSchemasTypeByModelValue();
        this.updateIcons();
    }
    /**
     * Updates an array item of the model and emits the change event
     *
     * @param index
     * @param value
     */
    updateArrayItem(index, value) {
        this.model[index] = value;
        this.modelChange.emit(this.model);
    }
    /**
     * Adds a new item to the model
     */
    addArrayItem(dataType) {
        let schema;
        if (dataType) {
            schema = JSON.parse(JSON.stringify(Object.assign(Object.assign({}, this.schema.items), dataType.schema)));
        }
        else {
            schema = JSON.parse(JSON.stringify(this.schema.items));
        }
        if (!schema.type) {
            schema.type = 'object';
        }
        if (!schema.$meta) {
            schema.$meta = {};
        }
        if (Array.isArray(schema.type)) {
            schema.$meta.type = [...schema.type];
            schema.type = schema.type[0];
            schema.$meta.currentType = getCurrentType(schema);
        }
        const value = createValueForSchema(schema);
        if (value !== undefined) {
            this.model.push(value);
            this.schemas.push(schema);
        }
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Deletes an item from the array
     *
     * @param index
     */
    deleteArrayItem(index) {
        this.model.splice(index, 1);
        this.schemas.splice(index, 1);
        this.model = [...this.model];
        this.schemas = [...this.schemas];
        this.modelChange.emit(this.model);
    }
    /**
     * Track By function for the array ittierator
     *
     * @param index
     * @param value
     */
    arrayTrackBy(index) {
        return index;
    }
    /**
     *
     * @param property
     * @param type
     */
    changeItemType(index, type) {
        const schema = this.schemas[index];
        const dataType = this.dataTypeMap[type];
        if (dataType) {
            delete schema.format;
            schema.type = dataType.schema.type;
            if (dataType.schema.format) {
                schema.format = dataType.schema.format;
            }
            schema.$meta.currentType = getCurrentType(schema);
        }
        const value = createValueForSchema(schema);
        this.model[index] = value;
        this.modelChange.emit(this.model);
        this.updateIcons();
    }
    /**
     * Infers the schema type for each item in the array
     */
    initSchemasTypeByModelValue() {
        this.schemas = [];
        if (Array.isArray(this.model)) {
            this.model.forEach(value => {
                let schema = inferType(value, this.typeCheckOverrides);
                if (this.schema.items) {
                    schema = JSON.parse(JSON.stringify(Object.assign(Object.assign({}, this.schema.items), schema)));
                }
                this.schemas.push(schema);
            });
        }
    }
    /**
     * Updates the icons in the schemas
     */
    updateIcons() {
        for (const schema of this.schemas) {
            if (!schema.$meta) {
                schema.$meta = {};
            }
            schema.$meta.icon = getIcon(schema);
        }
    }
}
ArrayNode.decorators = [
    { type: Directive }
];
ArrayNode.propDecorators = {
    schema: [{ type: Input }],
    model: [{ type: Input }],
    required: [{ type: Input }],
    expanded: [{ type: Input }],
    path: [{ type: Input }],
    errors: [{ type: Input }],
    typeCheckOverrides: [{ type: Input }],
    schemaRef: [{ type: Input }],
    showKnownProperties: [{ type: Input }],
    modelChange: [{ type: Output }],
    schemaUpdate: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,