import { Component, Input, EventEmitter, Output, forwardRef, ViewEncapsulation, ContentChildren, QueryList, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { RadioButtonComponent } from './radiobutton.component';
const RADIOGROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RadioButtonGroupComponent),
    multi: true
};
let nextId = 0;
export class RadioButtonGroupComponent {
    constructor(_cdr) {
        this._cdr = _cdr;
        this.UNIQUE_ID = `ngx-radio-group-${++nextId}`;
        this.id = this.UNIQUE_ID;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._name = this.UNIQUE_ID;
        this._value = false;
        this._disabled = false;
        this._destroy$ = new Subject();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this._updateSelectedRadioFromValue();
            this._updateRadioDisabledState();
            this.onChangeCallback(this._value);
        }
    }
    get name() {
        return this._name;
    }
    set name(name) {
        if (this._name !== name) {
            this._name = name;
            this._updateRadioButtonNames();
        }
    }
    get selected() {
        return this._selected;
    }
    ngAfterContentInit() {
        this.subscribeToRadios();
        /* istanbul ignore else */
        if (this._radios) {
            this._radios.changes.subscribe(this.subscribeToRadios.bind(this));
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    ngOnChanges() {
        this._updateRadioDisabledState();
    }
    subscribeToRadios() {
        this._destroy$.next();
        /* istanbul ignore else */
        if (this._radios) {
            this._radios.map(radio => {
                radio.change.pipe(takeUntil(this._destroy$)).subscribe(this.onRadioSelected.bind(this));
            });
        }
        this._cdr.markForCheck();
    }
    onRadioSelected(value) {
        if (this.value !== value) {
            setTimeout(() => {
                this.value = value;
            });
        }
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    onChangeCallback(_) {
        // placeholder
    }
    /* istanbul ignore next */
    onTouchedCallback() {
        // placeholder
    }
    _updateRadioButtonNames() {
        if (this._radios) {
            this._radios.forEach(radio => {
                radio.name = this.name;
            });
        }
    }
    _updateSelectedRadioFromValue() {
        /* istanbul ignore else */
        if (this._radios) {
            this._radios.forEach(radio => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    _updateRadioDisabledState() {
        /* istanbul ignore else */
        if (this._radios) {
            this._radios.forEach(radio => {
                radio.groupDisabled = this.disabled;
            });
        }
    }
}
RadioButtonGroupComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'ngxRadiobuttonGroup',
                selector: 'ngx-radiobutton-group',
                providers: [RADIOGROUP_VALUE_ACCESSOR],
                template: ' <ng-content></ng-content> ',
                host: {
                    class: 'ngx-radiobutton-group',
                    '[class.disabled]': 'disabled'
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".ngx-radiobutton{display:block}.ngx-radiobutton .radio-label{display:block;position:relative;padding-left:1.5em;margin:0 .8rem 0 0;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ngx-radiobutton .radio-label--content{color:#cdd2dd}.ngx-radiobutton .radio-label input{position:absolute;opacity:0}.ngx-radiobutton .checkmark{position:absolute;top:.25em;left:0;height:1em;width:1em;background-color:transparent;border-radius:50%;border:1px solid #6f809e;opacity:1;transition:background-color .3s ease,opacity .3s ease}.ngx-radiobutton .radio-label:hover input~.checkmark{background-color:#2196f3;border:1px solid #2196f3;opacity:.3}.ngx-radiobutton .radio-label .checkmark:after,.ngx-radiobutton .radio-label:hover .checkmark:after{content:\"\";position:absolute;display:block;opacity:0;top:0;left:0;width:.25em;height:.25em;transform:translate3d(.32em,.32em,0);border-radius:50%;background:#fff;box-shadow:0 1px 0 rgba(0,0,0,.25);transition:opacity .5s ease}.ngx-radiobutton.disabled .radio-input:after,.ngx-radiobutton.disabled .radio-input:before,.ngx-radiobutton.disabled .radio-label{cursor:not-allowed}.ngx-radiobutton.disabled .radio-label:hover input~.checkmark{background-color:transparent;border:1px solid #6f809e;opacity:1}.ngx-radiobutton.disabled .radio-label:hover .checkmark:after{opacity:0}.ngx-radiobutton.disabled .radio-label input:checked~.checkmark,.ngx-radiobutton .radio-label input:checked~.checkmark{background-color:#2196f3;border:1px solid #2196f3;opacity:1}.ngx-radiobutton.disabled .radio-label input:checked~.checkmark:after,.ngx-radiobutton .radio-label:hover .checkmark:after,.ngx-radiobutton .radio-label input:checked~.checkmark:after{opacity:1}"]
            },] }
];
RadioButtonGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
RadioButtonGroupComponent.propDecorators = {
    id: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    change: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    _radios: [{ type: ContentChildren, args: [forwardRef(() => RadioButtonComponent), { descendants: true },] }]
};
//# sourceMappingURL=data:application/json;base64,