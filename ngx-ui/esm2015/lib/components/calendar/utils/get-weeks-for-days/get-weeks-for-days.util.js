import { getNumberRange } from '../get-number-range/get-number-range.util';
/**
 * Gets a array of days split by week
 *
 * @param days
 * @param offset
 * @return days by week
 */
export function getWeeksForDays(days, startDay) {
    const weeks = [];
    let offset = 7;
    // fill front row
    if (startDay < 7) {
        offset = 7 - startDay;
    }
    while (days.length) {
        let wk = days.slice(0, offset);
        days.splice(0, offset);
        // fill front row
        if (offset < 7) {
            const firstDay = wk[0].date;
            const fill = getNumberRange(0, startDay).map((_, i) => {
                const date = firstDay.clone().subtract(startDay - i, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date,
                    prevMonth: true
                };
            });
            wk = [...fill, ...wk];
            offset = 7;
        }
        // fill last row
        if (!days.length && wk.length !== 7) {
            const lastDay = wk[wk.length - 1].date;
            const fill = getNumberRange(wk.length, 7).map((_, i) => {
                const date = lastDay.clone().add(i + 1, 'd');
                return {
                    num: date.date(),
                    dayOfWeek: date.day(),
                    date,
                    nextMonth: true
                };
            });
            wk = [...wk, ...fill];
        }
        wk.forEach(day => {
            day.classes = {
                'first-day-of-month': day.num === 1,
                'last-day-of-week': day.dayOfWeek === 6,
                today: day.today,
                'next-month': day.nextMonth,
                'prev-month': day.prevMonth
            };
        });
        weeks.push(wk);
    }
    return weeks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdlZWtzLWZvci1kYXlzLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zd2ltbGFuZS9uZ3gtdWkvc3JjL2xpYi9jb21wb25lbnRzL2NhbGVuZGFyL3V0aWxzL2dldC13ZWVrcy1mb3ItZGF5cy9nZXQtd2Vla3MtZm9yLWRheXMudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFM0U7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFtQixFQUFFLFFBQWdCO0lBQ25FLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7SUFDaEMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsaUJBQWlCO0lBQ2pCLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtRQUNoQixNQUFNLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztLQUN2QjtJQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNsQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV2QixpQkFBaUI7UUFDakIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM1QixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDcEQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMxRCxPQUFPO29CQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNoQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDckIsSUFBSTtvQkFDSixTQUFTLEVBQUUsSUFBSTtpQkFDaEIsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN0QixNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7UUFFRCxnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDckQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QyxPQUFPO29CQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNoQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDckIsSUFBSTtvQkFDSixTQUFTLEVBQUUsSUFBSTtpQkFDaEIsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUN2QjtRQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDZixHQUFHLENBQUMsT0FBTyxHQUFHO2dCQUNaLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDbkMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLFNBQVMsS0FBSyxDQUFDO2dCQUN2QyxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7Z0JBQ2hCLFlBQVksRUFBRSxHQUFHLENBQUMsU0FBUztnQkFDM0IsWUFBWSxFQUFFLEdBQUcsQ0FBQyxTQUFTO2FBQzVCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDaEI7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxlbmRhck1vbnRoIH0gZnJvbSAnLi4vLi4vY2FsZW5kYXItbW9udGgudHlwZSc7XG5pbXBvcnQgeyBDYWxlbmRhckRheSB9IGZyb20gJy4uLy4uL2NhbGVuZGFyLWRheS5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBnZXROdW1iZXJSYW5nZSB9IGZyb20gJy4uL2dldC1udW1iZXItcmFuZ2UvZ2V0LW51bWJlci1yYW5nZS51dGlsJztcblxuLyoqXG4gKiBHZXRzIGEgYXJyYXkgb2YgZGF5cyBzcGxpdCBieSB3ZWVrXG4gKlxuICogQHBhcmFtIGRheXNcbiAqIEBwYXJhbSBvZmZzZXRcbiAqIEByZXR1cm4gZGF5cyBieSB3ZWVrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrc0ZvckRheXMoZGF5czogQ2FsZW5kYXJEYXlbXSwgc3RhcnREYXk6IG51bWJlcikge1xuICBjb25zdCB3ZWVrczogQ2FsZW5kYXJNb250aCA9IFtdO1xuICBsZXQgb2Zmc2V0ID0gNztcblxuICAvLyBmaWxsIGZyb250IHJvd1xuICBpZiAoc3RhcnREYXkgPCA3KSB7XG4gICAgb2Zmc2V0ID0gNyAtIHN0YXJ0RGF5O1xuICB9XG5cbiAgd2hpbGUgKGRheXMubGVuZ3RoKSB7XG4gICAgbGV0IHdrID0gZGF5cy5zbGljZSgwLCBvZmZzZXQpO1xuICAgIGRheXMuc3BsaWNlKDAsIG9mZnNldCk7XG5cbiAgICAvLyBmaWxsIGZyb250IHJvd1xuICAgIGlmIChvZmZzZXQgPCA3KSB7XG4gICAgICBjb25zdCBmaXJzdERheSA9IHdrWzBdLmRhdGU7XG4gICAgICBjb25zdCBmaWxsID0gZ2V0TnVtYmVyUmFuZ2UoMCwgc3RhcnREYXkpLm1hcCgoXywgaSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlID0gZmlyc3REYXkuY2xvbmUoKS5zdWJ0cmFjdChzdGFydERheSAtIGksICdkJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbnVtOiBkYXRlLmRhdGUoKSxcbiAgICAgICAgICBkYXlPZldlZWs6IGRhdGUuZGF5KCksXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICBwcmV2TW9udGg6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICB3ayA9IFsuLi5maWxsLCAuLi53a107XG4gICAgICBvZmZzZXQgPSA3O1xuICAgIH1cblxuICAgIC8vIGZpbGwgbGFzdCByb3dcbiAgICBpZiAoIWRheXMubGVuZ3RoICYmIHdrLmxlbmd0aCAhPT0gNykge1xuICAgICAgY29uc3QgbGFzdERheSA9IHdrW3drLmxlbmd0aCAtIDFdLmRhdGU7XG4gICAgICBjb25zdCBmaWxsID0gZ2V0TnVtYmVyUmFuZ2Uod2subGVuZ3RoLCA3KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IGxhc3REYXkuY2xvbmUoKS5hZGQoaSArIDEsICdkJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbnVtOiBkYXRlLmRhdGUoKSxcbiAgICAgICAgICBkYXlPZldlZWs6IGRhdGUuZGF5KCksXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICBuZXh0TW9udGg6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICB3ayA9IFsuLi53aywgLi4uZmlsbF07XG4gICAgfVxuXG4gICAgd2suZm9yRWFjaChkYXkgPT4ge1xuICAgICAgZGF5LmNsYXNzZXMgPSB7XG4gICAgICAgICdmaXJzdC1kYXktb2YtbW9udGgnOiBkYXkubnVtID09PSAxLFxuICAgICAgICAnbGFzdC1kYXktb2Ytd2Vlayc6IGRheS5kYXlPZldlZWsgPT09IDYsXG4gICAgICAgIHRvZGF5OiBkYXkudG9kYXksXG4gICAgICAgICduZXh0LW1vbnRoJzogZGF5Lm5leHRNb250aCxcbiAgICAgICAgJ3ByZXYtbW9udGgnOiBkYXkucHJldk1vbnRoXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgd2Vla3MucHVzaCh3ayk7XG4gIH1cblxuICByZXR1cm4gd2Vla3M7XG59XG4iXX0=