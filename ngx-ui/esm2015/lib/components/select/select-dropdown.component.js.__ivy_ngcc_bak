import { __decorate, __metadata } from "tslib";
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { debounceable } from '../../decorators/debounceable/debounceable.decorator';
import { KeyboardKeys } from '../../enums/keyboard-keys.enum';
import { containsFilter } from './contains-filter.util';
export class SelectDropdownComponent {
    constructor(elementRef, cdr) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.allowAdditionsText = 'Add Value';
        this.keyup = new EventEmitter();
        this.selection = new EventEmitter();
        this.close = new EventEmitter();
        this.filterQueryIsInOptions = false;
        this._filterCaseSensitive = false;
    }
    get tagging() {
        return this._tagging;
    }
    set tagging(tagging) {
        this._tagging = coerceBooleanProperty(tagging);
    }
    get allowAdditions() {
        return this._allowAdditions;
    }
    set allowAdditions(allowAdditions) {
        this._allowAdditions = coerceBooleanProperty(allowAdditions);
    }
    get filterable() {
        return this._filterable;
    }
    set filterable(filterable) {
        this._filterable = coerceBooleanProperty(filterable);
    }
    get filterCaseSensitive() {
        return this._filterCaseSensitive;
    }
    set filterCaseSensitive(filterCaseSensitive) {
        this._filterCaseSensitive = coerceBooleanProperty(filterCaseSensitive);
    }
    get focusIndex() {
        return this._focusIndex;
    }
    set focusIndex(val) {
        this._focusIndex = coerceNumberProperty(val);
        this.focusElement(this._focusIndex);
    }
    get filterQuery() {
        return this._filterQuery;
    }
    set filterQuery(val) {
        this._filterQuery = val;
        this.groups = this.calculateGroups(this.groupBy, this.options, val);
    }
    get groupBy() {
        return this._groupBy;
    }
    set groupBy(val) {
        this._groupBy = val;
        this.groups = this.calculateGroups(val, this.options);
    }
    get options() {
        return this._options;
    }
    set options(val) {
        this.groups = this.calculateGroups(this.groupBy, val);
        this._options = val;
    }
    get element() {
        return this.elementRef.nativeElement;
    }
    get isNotTemplate() {
        return !(typeof this.allowAdditionsText === 'object' && this.allowAdditionsText instanceof TemplateRef);
    }
    ngAfterViewInit() {
        if (this.filterable && !this.tagging) {
            setTimeout(() => {
                this.filterInput.nativeElement.focus();
            }, 5);
        }
    }
    isSelected(option) {
        if (!this.selected || !this.selected.length)
            return false;
        const idx = this.selected.findIndex(o => {
            if (this.identifier)
                return o[this.identifier] === option.value[this.identifier];
            return o === option.value;
        });
        return idx > -1;
    }
    updatefilterQueryIsInOptions() {
        this.filterQueryIsInOptions = this.options.some(o => o.name.toLowerCase() === this.filterQuery.toLowerCase());
        this.cdr.markForCheck();
    }
    clearFilter(filterInput) {
        filterInput.value = '';
        this.filterQuery = '';
        this.updatefilterQueryIsInOptions();
        this.cdr.markForCheck();
    }
    onInputKeyUp(event) {
        event.preventDefault();
        event.stopPropagation();
        const key = event.key;
        const value = event.target.value;
        if (key === KeyboardKeys.ESCAPE) {
            this.close.emit(true);
        }
        else if (event.key === KeyboardKeys.ARROW_DOWN) {
            ++this.focusIndex;
        }
        if (this.filterQuery !== value) {
            this.filterQuery = value;
        }
        this.updatefilterQueryIsInOptions();
        this.keyup.emit({ event, value });
    }
    onOptionKeyDown(event, option) {
        event.preventDefault();
        event.stopPropagation();
        const key = event.key;
        if (key === KeyboardKeys.ARROW_DOWN) {
            if (this.focusIndex < this.options.length - 1)
                ++this.focusIndex;
        }
        else if (key === KeyboardKeys.ARROW_UP) {
            if (this.focusIndex > 0)
                --this.focusIndex;
        }
        else if (key === KeyboardKeys.ENTER) {
            this.selection.emit(option);
        }
    }
    onAddClicked(event, value) {
        event.preventDefault();
        event.stopPropagation();
        this.selection.emit({ value, name: value });
        event.target.value = '';
        this.close.emit();
    }
    onShiftEnterKeyDown(event) {
        if (this.allowAdditions) {
            this.onAddClicked(event, this.filterQuery);
        }
    }
    focusElement(index) {
        const elements = this.element.getElementsByClassName('ngx-select-dropdown-option');
        const element = elements[index];
        if (element) {
            setTimeout(() => element.focus(), 5);
        }
    }
    calculateGroups(groupBy, options, filter) {
        if (!options)
            return [];
        const filterOptions = { filterCaseSensitive: this.filterCaseSensitive };
        // no group by defined, skip and just return
        // empty group object...
        if (!groupBy) {
            if (filter) {
                // filter options
                options = options.filter(o => {
                    return containsFilter({ name: o.name, value: o.value }, filter, filterOptions);
                });
            }
            // need to map indexes
            options = options.map((option, index) => {
                return { option, index };
            });
            return [{ options }];
        }
        const map = new Map();
        let i = 0;
        for (const option of options) {
            // only show items in filter criteria
            if (filter && !containsFilter({ name: option.name, value: option.value }, filter, filterOptions)) {
                continue;
            }
            const group = option.value[groupBy];
            const opt = map.get(group);
            // need to map the true indexes
            const kv = { option, index: i++ };
            if (!opt) {
                map.set(group, [kv]);
            }
            else {
                opt.push(kv);
            }
        }
        const result = [];
        map.forEach((value, key) => {
            result.push({ name: key, options: value });
        });
        return result;
    }
}
SelectDropdownComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'ngxSelectDropdown',
                selector: 'ngx-select-dropdown',
                template: "<div>\n  <div class=\"ngx-select-filter\" *ngIf=\"filterable && !tagging\">\n    <i class=\"ngx-icon ngx-search\"></i>\n    <input\n      #filterInput\n      type=\"search\"\n      tabindex=\"\"\n      autocomplete=\"off\"\n      autocorrect=\"off\"\n      spellcheck=\"off\"\n      class=\"ngx-select-filter-input\"\n      [placeholder]=\"filterPlaceholder\"\n      (keyup)=\"onInputKeyUp($event)\"\n      (keydown.shift.Enter)=\"onShiftEnterKeyDown($event)\"\n      (change)=\"$event.stopPropagation()\"\n    />\n    <i [hidden]=\"!filterInput.value\" class=\"ngx-icon ngx-x\" (click)=\"clearFilter(filterInput)\"></i>\n  </div>\n  <ul class=\"vertical-list ngx-select-dropdown-options\">\n    <li\n      *ngFor=\"let group of groups; let i = index; let first = first; let last = last; let odd = odd; let even = even\"\n      class=\"ngx-select-option-group\"\n    >\n      <ng-container *ngIf=\"group.name\">\n        <ng-container *ngIf=\"groupByTemplate; else defaultGroupName\">\n          <span class=\"ngx-select-option-group-name\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                groupByTemplate;\n                context: { groupName: group.name, index: i, first: first, last: last, odd: odd, even: even }\n              \"\n            ></ng-container>\n          </span>\n        </ng-container>\n        <ng-template #defaultGroupName>\n          <span class=\"ngx-select-option-group-name\" [innerHTML]=\"group.name\"> </span>\n        </ng-template>\n      </ng-container>\n      <ul class=\"vertical-list ngx-select-dropdown-options\">\n        <li\n          *ngFor=\"let kv of group.options\"\n          class=\"ngx-select-dropdown-option\"\n          [class.disabled]=\"kv.option.disabled\"\n          [class.active]=\"kv.index === focusIndex\"\n          [class.selected]=\"isSelected(kv.option)\"\n          [hidden]=\"kv.option.hidden\"\n          tabindex=\"-1\"\n          (click)=\"selection.emit(kv.option)\"\n          (keydown)=\"onOptionKeyDown($event, kv.option)\"\n        >\n          <ng-template\n            *ngIf=\"kv.option.optionTemplate\"\n            [ngTemplateOutlet]=\"kv.option.optionTemplate\"\n            [ngTemplateOutletContext]=\"{ option: kv.option }\"\n          >\n          </ng-template>\n          <span *ngIf=\"!kv.option.optionTemplate\" [innerHTML]=\"kv.option.name\"> </span>\n          <i\n            *ngIf=\"!kv.option.optionTemplate && isSelected(kv.option)\"\n            class=\"ngx-icon ngx-check ngx-select-dropdown--selected-option\"\n          ></i>\n        </li>\n        <li\n          *ngIf=\"allowAdditions && filterQuery && group.options?.length && !filterQueryIsInOptions\"\n          class=\"ngx-select-empty-placeholder\"\n        >\n          <a href=\"#\" class=\"ngx-select-add-current-value\" (click)=\"onAddClicked($event, filterQuery)\">\n            <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"allowAdditionsText\"> </span>\n            <ng-template #tpl>\n              <ng-container *ngTemplateOutlet=\"allowAdditionsText\"></ng-container>\n            </ng-template>\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"filterQuery && filterEmptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n        >\n          <span class=\"ngx-select-empty-placeholder-text\" [innerHTML]=\"filterEmptyPlaceholder\"> </span>\n          <a\n            *ngIf=\"allowAdditions\"\n            href=\"#\"\n            class=\"ngx-select-empty-placeholder-add\"\n            (click)=\"onAddClicked($event, filterQuery)\"\n          >\n            <span *ngIf=\"isNotTemplate; else tpl\" [innerHTML]=\"allowAdditionsText\"> </span>\n            <ng-template #tpl>\n              <ng-container *ngTemplateOutlet=\"allowAdditionsText\"></ng-container>\n            </ng-template>\n          </a>\n        </li>\n        <li\n          *ngIf=\"!filterQuery && emptyPlaceholder && !group.options?.length\"\n          class=\"ngx-select-empty-placeholder\"\n          [innerHTML]=\"emptyPlaceholder\"\n        ></li>\n      </ul>\n    </li>\n  </ul>\n</div>\n",
                host: {
                    class: 'ngx-select-dropdown',
                    '[class.groupings]': 'groupBy'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
SelectDropdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
SelectDropdownComponent.propDecorators = {
    selected: [{ type: Input }],
    identifier: [{ type: Input }],
    filterPlaceholder: [{ type: Input }],
    filterEmptyPlaceholder: [{ type: Input }],
    emptyPlaceholder: [{ type: Input }],
    allowAdditionsText: [{ type: Input }],
    tagging: [{ type: Input }],
    allowAdditions: [{ type: Input }],
    filterable: [{ type: Input }],
    filterCaseSensitive: [{ type: Input }],
    focusIndex: [{ type: Input }],
    filterQuery: [{ type: Input }],
    groupBy: [{ type: Input }],
    groupByTemplate: [{ type: Input }],
    options: [{ type: Input }],
    keyup: [{ type: Output }],
    selection: [{ type: Output }],
    close: [{ type: Output }],
    filterInput: [{ type: ViewChild, args: ['filterInput',] }]
};
__decorate([
    debounceable(500),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SelectDropdownComponent.prototype, "updatefilterQueryIsInOptions", null);
//# sourceMappingURL=data:application/json;base64,