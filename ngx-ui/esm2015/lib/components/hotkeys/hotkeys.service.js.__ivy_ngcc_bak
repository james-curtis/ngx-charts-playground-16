import { Injectable, NgZone } from '@angular/core';
import Mousetrap from 'mousetrap';
import { Subject } from 'rxjs';
import { HotkeyStatus } from './hotkey-status.enum';
import * as i0 from "@angular/core";
let hotkeys = {};
const hotkeyChangedSource = new Subject();
const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
const tags = ['INPUT', 'SELECT', 'TEXTAREA'];
/* eslint-disable */
const map = {
    command: '\u2318',
    shift: '\u21E7',
    left: '\u2190',
    right: '\u2192',
    up: '\u2191',
    down: '\u2193',
    return: '\u23CE',
    backspace: '\u232B' // ⌫
};
/* eslint-enable */
function _getDisplay(combo) {
    const keys = combo.split('+');
    const result = [];
    for (const k of keys) {
        if (k === 'mod') {
            result.push(isMac ? map.command : /* istanbul ignore next */ 'ctrl');
            continue;
        }
        const mapped = map[k];
        result.push(mapped || k);
    }
    return result;
}
export function _add(combo, opts) {
    opts.status = opts.status || HotkeyStatus.Active;
    opts.keys = _getDisplay(combo);
    opts.visible = opts.visible !== undefined ? opts.visible : true;
    opts.allowIn = Array.isArray(opts.allowIn) ? opts.allowIn.map(tag => tag.toUpperCase()) : [];
    const mousetrap = new Mousetrap();
    if (opts.allowIn.length) {
        /* istanbul ignore next */
        mousetrap.stopCallback = function (_, element) {
            if (!tags.includes(element.tagName) || opts.allowIn.includes(element.tagName)) {
                return false;
            }
            return true;
        };
    }
    mousetrap.bind(combo, callback);
    if (hotkeys[combo] === undefined) {
        hotkeys[combo] = [];
    }
    hotkeys[combo].push(opts);
    hotkeyChangedSource.next(hotkeys);
    return opts;
    /* istanbul ignore next */
    function callback(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        else {
            // internet explorer
            event.returnValue = false;
        }
        if (opts && opts.status === HotkeyStatus.Active) {
            opts.zone.run(() => {
                opts.callback(event);
            });
        }
    }
}
export function _suspend(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component === comp) {
                hotkey.status = HotkeyStatus.Suspended;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _pauseOthers(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component !== comp) {
                hotkey.status = `*${hotkey.status}`;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _unpauseOthers(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component !== comp && hotkey.status[0] === '*') {
                hotkey.status = hotkey.status.replace('*', '');
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _activate(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (const hotkey of hotkeyList) {
            if (hotkey.component === comp) {
                hotkey.status = HotkeyStatus.Active;
            }
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function _deregister(comp) {
    for (const comb in hotkeys) {
        const hotkeyList = hotkeys[comb];
        for (let i = 0; i < hotkeyList.length; i++) {
            if (hotkeyList[i].component === comp) {
                hotkeyList[i].status = HotkeyStatus.Disabled;
                hotkeyList.splice(hotkeyList.indexOf(hotkeyList[i]), 1);
            }
        }
        if (!hotkeyList.length) {
            Mousetrap.unbind(comb);
        }
    }
    hotkeyChangedSource.next(hotkeys);
}
export function Hotkey(key, description, options) {
    return (target, name) => {
        const oldInit = target.ngOnInit;
        target.ngOnInit = function () {
            if (oldInit)
                oldInit.bind(this)();
            _add(key, Object.assign({ callback: /* istanbul ignore next */ () => {
                    target[name].bind(this)();
                }, description, component: this, zone: new NgZone({ enableLongStackTrace: false }) }, options));
        };
        const oldDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            if (oldDestroy)
                oldDestroy.bind(this)();
            _deregister(this);
        };
    };
}
export class HotkeysService {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.suspend = _suspend;
        this.activate = _activate;
        this.deregister = _deregister;
        this.pauseOthers = _pauseOthers;
        this.unpauseOthers = _unpauseOthers;
        this.changeEvent = hotkeyChangedSource.asObservable();
    }
    get hotkeys() {
        return hotkeys;
    }
    add(combo, opts) {
        return _add(combo, Object.assign({ zone: this.ngZone }, opts));
    }
    clear() {
        hotkeys = {};
        Mousetrap.reset();
    }
}
HotkeysService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HotkeysService_Factory() { return new HotkeysService(i0.ɵɵinject(i0.NgZone)); }, token: HotkeysService, providedIn: "root" });
HotkeysService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
HotkeysService.ctorParameters = () => [
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90a2V5cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3dpbWxhbmUvbmd4LXVpL3NyYy9saWIvY29tcG9uZW50cy9ob3RrZXlzL2hvdGtleXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUcvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBRXBELElBQUksT0FBTyxHQUFrQyxFQUFFLENBQUM7QUFDaEQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBaUMsQ0FBQztBQUN6RSxNQUFNLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyRSxNQUFNLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFN0Msb0JBQW9CO0FBQ3BCLE1BQU0sR0FBRyxHQUFHO0lBQ1YsT0FBTyxFQUFFLFFBQVE7SUFDakIsS0FBSyxFQUFFLFFBQVE7SUFDZixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRSxRQUFRO0lBQ2YsRUFBRSxFQUFFLFFBQVE7SUFDWixJQUFJLEVBQUUsUUFBUTtJQUNkLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSTtDQUN6QixDQUFDO0FBQ0YsbUJBQW1CO0FBRW5CLFNBQVMsV0FBVyxDQUFDLEtBQWE7SUFDaEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixNQUFNLE1BQU0sR0FBRyxF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O0lBTVosQ0FBQztJQUovQyxJQUFJLE9BQU87UUFDVCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBSUQsR0FBRyxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssa0JBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUssSUFBSSxFQUFHLENBQUM7SUFDckQsQ0FBQztJQUVELEtBQUs7UUFDSCxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7WUF4QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFoTW9CLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBNb3VzZXRyYXAgZnJvbSAnbW91c2V0cmFwJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSG90a2V5IH0gZnJvbSAnLi9ob3RrZXkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEhvdGtleVN0YXR1cyB9IGZyb20gJy4vaG90a2V5LXN0YXR1cy5lbnVtJztcblxubGV0IGhvdGtleXM6IHsgW2NvbWJvOiBzdHJpbmddOiBIb3RrZXlbXSB9ID0ge307XG5jb25zdCBob3RrZXlDaGFuZ2VkU291cmNlID0gbmV3IFN1YmplY3Q8eyBbY29tYm86IHN0cmluZ106IEhvdGtleVtdIH0+KCk7XG5jb25zdCBpc01hYyA9IC9NYWN8aVBvZHxpUGhvbmV8aVBhZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKTtcbmNvbnN0IHRhZ3MgPSBbJ0lOUFVUJywgJ1NFTEVDVCcsICdURVhUQVJFQSddO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgbWFwID0ge1xuICBjb21tYW5kOiAnXFx1MjMxOCcsIC8vIOKMmFxuICBzaGlmdDogJ1xcdTIxRTcnLCAvLyDih6dcbiAgbGVmdDogJ1xcdTIxOTAnLCAvLyDihpBcbiAgcmlnaHQ6ICdcXHUyMTkyJywgLy8g4oaSXG4gIHVwOiAnXFx1MjE5MScsIC8vIOKGkVxuICBkb3duOiAnXFx1MjE5MycsIC8vIOKGk1xuICByZXR1cm46ICdcXHUyM0NFJywgLy8g4o+OXG4gIGJhY2tzcGFjZTogJ1xcdTIzMkInIC8vIOKMq1xufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZnVuY3Rpb24gX2dldERpc3BsYXkoY29tYm86IHN0cmluZykge1xuICBjb25zdCBrZXlzID0gY29tYm8uc3BsaXQoJysnKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgZm9yIChjb25zdCBrIG9mIGtleXMpIHtcbiAgICBpZiAoayA9PT0gJ21vZCcpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzTWFjID8gbWFwLmNvbW1hbmQgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAnY3RybCcpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWFwcGVkID0gbWFwW2tdO1xuICAgIHJlc3VsdC5wdXNoKG1hcHBlZCB8fCBrKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfYWRkKGNvbWJvOiBzdHJpbmcsIG9wdHM6IEhvdGtleSkge1xuICBvcHRzLnN0YXR1cyA9IG9wdHMuc3RhdHVzIHx8IEhvdGtleVN0YXR1cy5BY3RpdmU7XG4gIG9wdHMua2V5cyA9IF9nZXREaXNwbGF5KGNvbWJvKTtcbiAgb3B0cy52aXNpYmxlID0gb3B0cy52aXNpYmxlICE9PSB1bmRlZmluZWQgPyBvcHRzLnZpc2libGUgOiB0cnVlO1xuXG4gIG9wdHMuYWxsb3dJbiA9IEFycmF5LmlzQXJyYXkob3B0cy5hbGxvd0luKSA/IG9wdHMuYWxsb3dJbi5tYXAodGFnID0+IHRhZy50b1VwcGVyQ2FzZSgpKSA6IFtdO1xuXG4gIGNvbnN0IG1vdXNldHJhcCA9IG5ldyBNb3VzZXRyYXAoKTtcblxuICBpZiAob3B0cy5hbGxvd0luLmxlbmd0aCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgbW91c2V0cmFwLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uIChfLCBlbGVtZW50KSB7XG4gICAgICBpZiAoIXRhZ3MuaW5jbHVkZXMoZWxlbWVudC50YWdOYW1lKSB8fCBvcHRzLmFsbG93SW4uaW5jbHVkZXMoZWxlbWVudC50YWdOYW1lKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH1cblxuICBtb3VzZXRyYXAuYmluZChjb21ibywgY2FsbGJhY2spO1xuXG4gIGlmIChob3RrZXlzW2NvbWJvXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaG90a2V5c1tjb21ib10gPSBbXTtcbiAgfVxuXG4gIGhvdGtleXNbY29tYm9dLnB1c2gob3B0cyk7XG4gIGhvdGtleUNoYW5nZWRTb3VyY2UubmV4dChob3RrZXlzKTtcblxuICByZXR1cm4gb3B0cztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBmdW5jdGlvbiBjYWxsYmFjayhldmVudDogRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGludGVybmV0IGV4cGxvcmVyXG4gICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChvcHRzICYmIG9wdHMuc3RhdHVzID09PSBIb3RrZXlTdGF0dXMuQWN0aXZlKSB7XG4gICAgICBvcHRzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgb3B0cy5jYWxsYmFjayhldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zdXNwZW5kKGNvbXA6IGFueSkge1xuICBmb3IgKGNvbnN0IGNvbWIgaW4gaG90a2V5cykge1xuICAgIGNvbnN0IGhvdGtleUxpc3QgPSBob3RrZXlzW2NvbWJdO1xuXG4gICAgZm9yIChjb25zdCBob3RrZXkgb2YgaG90a2V5TGlzdCkge1xuICAgICAgaWYgKGhvdGtleS5jb21wb25lbnQgPT09IGNvbXApIHtcbiAgICAgICAgaG90a2V5LnN0YXR1cyA9IEhvdGtleVN0YXR1cy5TdXNwZW5kZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaG90a2V5Q2hhbmdlZFNvdXJjZS5uZXh0KGhvdGtleXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3BhdXNlT3RoZXJzKGNvbXA/OiBhbnkpIHtcbiAgZm9yIChjb25zdCBjb21iIGluIGhvdGtleXMpIHtcbiAgICBjb25zdCBob3RrZXlMaXN0ID0gaG90a2V5c1tjb21iXTtcblxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIGhvdGtleUxpc3QpIHtcbiAgICAgIGlmIChob3RrZXkuY29tcG9uZW50ICE9PSBjb21wKSB7XG4gICAgICAgIGhvdGtleS5zdGF0dXMgPSBgKiR7aG90a2V5LnN0YXR1c31gO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhvdGtleUNoYW5nZWRTb3VyY2UubmV4dChob3RrZXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF91bnBhdXNlT3RoZXJzKGNvbXA/OiBhbnkpIHtcbiAgZm9yIChjb25zdCBjb21iIGluIGhvdGtleXMpIHtcbiAgICBjb25zdCBob3RrZXlMaXN0ID0gaG90a2V5c1tjb21iXTtcblxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIGhvdGtleUxpc3QpIHtcbiAgICAgIGlmIChob3RrZXkuY29tcG9uZW50ICE9PSBjb21wICYmIGhvdGtleS5zdGF0dXNbMF0gPT09ICcqJykge1xuICAgICAgICBob3RrZXkuc3RhdHVzID0gaG90a2V5LnN0YXR1cy5yZXBsYWNlKCcqJywgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhvdGtleUNoYW5nZWRTb3VyY2UubmV4dChob3RrZXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9hY3RpdmF0ZShjb21wOiBhbnkpIHtcbiAgZm9yIChjb25zdCBjb21iIGluIGhvdGtleXMpIHtcbiAgICBjb25zdCBob3RrZXlMaXN0ID0gaG90a2V5c1tjb21iXTtcblxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIGhvdGtleUxpc3QpIHtcbiAgICAgIGlmIChob3RrZXkuY29tcG9uZW50ID09PSBjb21wKSB7XG4gICAgICAgIGhvdGtleS5zdGF0dXMgPSBIb3RrZXlTdGF0dXMuQWN0aXZlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhvdGtleUNoYW5nZWRTb3VyY2UubmV4dChob3RrZXlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kZXJlZ2lzdGVyKGNvbXA6IGFueSkge1xuICBmb3IgKGNvbnN0IGNvbWIgaW4gaG90a2V5cykge1xuICAgIGNvbnN0IGhvdGtleUxpc3QgPSBob3RrZXlzW2NvbWJdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob3RrZXlMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaG90a2V5TGlzdFtpXS5jb21wb25lbnQgPT09IGNvbXApIHtcbiAgICAgICAgaG90a2V5TGlzdFtpXS5zdGF0dXMgPSBIb3RrZXlTdGF0dXMuRGlzYWJsZWQ7XG4gICAgICAgIGhvdGtleUxpc3Quc3BsaWNlKGhvdGtleUxpc3QuaW5kZXhPZihob3RrZXlMaXN0W2ldKSwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFob3RrZXlMaXN0Lmxlbmd0aCkge1xuICAgICAgTW91c2V0cmFwLnVuYmluZChjb21iKTtcbiAgICB9XG4gIH1cblxuICBob3RrZXlDaGFuZ2VkU291cmNlLm5leHQoaG90a2V5cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIb3RrZXkoa2V5OiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEhvdGtleT4pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgb2xkSW5pdCA9IHRhcmdldC5uZ09uSW5pdDtcbiAgICB0YXJnZXQubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob2xkSW5pdCkgb2xkSW5pdC5iaW5kKHRoaXMpKCk7XG5cbiAgICAgIF9hZGQoa2V5LCB7XG4gICAgICAgIGNhbGxiYWNrOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoKSA9PiB7XG4gICAgICAgICAgdGFyZ2V0W25hbWVdLmJpbmQodGhpcykoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgem9uZTogbmV3IE5nWm9uZSh7IGVuYWJsZUxvbmdTdGFja1RyYWNlOiBmYWxzZSB9KSxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9sZERlc3Ryb3kgPSB0YXJnZXQubmdPbkRlc3Ryb3k7XG4gICAgdGFyZ2V0Lm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9sZERlc3Ryb3kpIG9sZERlc3Ryb3kuYmluZCh0aGlzKSgpO1xuICAgICAgX2RlcmVnaXN0ZXIodGhpcyk7XG4gICAgfTtcbiAgfTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSG90a2V5c1NlcnZpY2Uge1xuICByZWFkb25seSBzdXNwZW5kID0gX3N1c3BlbmQ7XG4gIHJlYWRvbmx5IGFjdGl2YXRlID0gX2FjdGl2YXRlO1xuICByZWFkb25seSBkZXJlZ2lzdGVyID0gX2RlcmVnaXN0ZXI7XG4gIHJlYWRvbmx5IHBhdXNlT3RoZXJzID0gX3BhdXNlT3RoZXJzO1xuICByZWFkb25seSB1bnBhdXNlT3RoZXJzID0gX3VucGF1c2VPdGhlcnM7XG4gIHJlYWRvbmx5IGNoYW5nZUV2ZW50ID0gaG90a2V5Q2hhbmdlZFNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICBnZXQgaG90a2V5cygpIHtcbiAgICByZXR1cm4gaG90a2V5cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgYWRkKGNvbWJvOiBzdHJpbmcsIG9wdHM6IEhvdGtleSkge1xuICAgIHJldHVybiBfYWRkKGNvbWJvLCB7IHpvbmU6IHRoaXMubmdab25lLCAuLi5vcHRzIH0pO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgaG90a2V5cyA9IHt9O1xuICAgIE1vdXNldHJhcC5yZXNldCgpO1xuICB9XG59XG4iXX0=