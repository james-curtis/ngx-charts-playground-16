import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild, ViewEncapsulation, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgModel, Validators } from '@angular/forms';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { BehaviorSubject } from 'rxjs';
import { Appearance } from '../../mixins/appearance/appearance.enum';
import { InputTypes } from './input-types.enum';
import { INPUT_ANIMATIONS } from './input-animations.constant';
import { Size } from '../../mixins/size/size.enum';
let nextId = 0;
const INPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => InputComponent),
    multi: true
};
const INPUT_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => InputComponent),
    multi: true
};
const MIN_WIDTH = 60;
export class InputComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.id = `input-${++nextId}`;
        this.label = '';
        this.placeholder = '';
        this.size = Size.Small;
        this.appearance = Appearance.Legacy;
        this.withMargin = true;
        this.requiredIndicator = '*';
        this.passwordToggleEnabled = false;
        this.unlockableTooltip = 'Click to unlock';
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.keyup = new EventEmitter();
        this.click = new EventEmitter();
        this.select = new EventEmitter();
        this.focused = false;
        this.type$ = new BehaviorSubject(InputTypes.text);
        this.inputTypes = InputTypes;
        this._value = '';
        this._type = InputTypes.text;
        this._passwordTextVisible = false;
        this._disabled = false;
        this._required = false;
        this._autoSelect = false;
        this._autofocus = false;
        this._autocomplete = false;
        this._autocorrect = false;
        this._spellcheck = false;
        this._autosize = false;
        this._minWidth = MIN_WIDTH;
        this._unlockable = false;
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.onChangeCallback = () => {
            // placeholder
        };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    get minWidth() {
        return this._minWidth;
    }
    set minWidth(minWidth) {
        this._minWidth = coerceNumberProperty(minWidth);
    }
    get required() {
        return this._required;
    }
    set required(required) {
        this._required = coerceBooleanProperty(required);
    }
    get passwordTextVisible() {
        return this._passwordTextVisible;
    }
    set passwordTextVisible(p) {
        this._passwordTextVisible = coerceBooleanProperty(p);
        this.updateInputType();
    }
    get autoSelect() {
        return this._autoSelect;
    }
    set autoSelect(autoSelect) {
        this._autoSelect = coerceBooleanProperty(autoSelect);
    }
    get autofocus() {
        return this._autofocus;
    }
    set autofocus(autofocus) {
        this._autofocus = coerceBooleanProperty(autofocus);
    }
    get autocomplete() {
        return this._autocomplete;
    }
    set autocomplete(autocomplete) {
        this._autocomplete = coerceBooleanProperty(autocomplete);
    }
    get autocorrect() {
        return this._autocorrect;
    }
    set autocorrect(autocorrect) {
        this._autocorrect = coerceBooleanProperty(autocorrect);
    }
    get spellcheck() {
        return this._spellcheck;
    }
    set spellcheck(spellcheck) {
        this._spellcheck = coerceBooleanProperty(spellcheck);
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
        this.updateInputType();
    }
    get autosize() {
        return this._autosize;
    }
    set autosize(v) {
        this._autosize = coerceBooleanProperty(v);
    }
    get unlockable() {
        return this._unlockable;
    }
    set unlockable(v) {
        this._unlockable = coerceBooleanProperty(v);
        if (this._unlockable) {
            this.disabled = true;
        }
    }
    get value() {
        return this._value;
    }
    set value(val) {
        if (val !== this._value) {
            this._value = this.type === InputTypes.number ? coerceNumberProperty(val, null) : val;
            this.onChangeCallback(this._value);
        }
    }
    get focusedOrDirty() {
        if (this.focused) {
            return true;
        }
        if (typeof this.value === 'string') {
            return this.value && this.value.length;
        }
        return typeof this.value !== 'undefined' && this.value !== null;
    }
    get isTouched() {
        return this.inputModel ? this.inputModel.touched : false;
    }
    get labelState() {
        return this.placeholder || this.focusedOrDirty || this.appearance === Appearance.Fill ? 'outside' : 'inside';
    }
    get underlineState() {
        return this.focused ? 'expanded' : 'collapsed';
    }
    get element() {
        return this.type === InputTypes.textarea ? this.textareaControl : this.inputControl;
    }
    ngAfterViewInit() {
        if (this.autofocus) {
            setTimeout(() => {
                this.element.nativeElement.focus();
                // sometimes the label doesn't update on load
                this.cdr.markForCheck();
            });
        }
    }
    ngOnDestroy() {
        this.clearSpinnerInterval();
    }
    onChange(event) {
        event.stopPropagation();
        this.change.emit(this.value);
    }
    onKeyUp(event) {
        event.stopPropagation();
        this.keyup.emit(event);
    }
    onFocus(event) {
        event.stopPropagation();
        this.focused = true;
        if (this.autoSelect) {
            setTimeout(() => this.element.nativeElement.select());
            this.select.emit(event);
        }
        this.focus.emit(event);
        this.onTouchedCallback();
    }
    onBlur(event) {
        event.stopPropagation();
        this.focused = false;
        this.blur.emit(event);
    }
    validate(c) {
        if (this.type !== InputTypes.number) {
            return null;
        }
        return Object.assign(Object.assign({}, Validators.max(this.max)(c)), Validators.min(this.min)(c));
    }
    writeValue(val) {
        if (val !== this._value) {
            this._value = val;
        }
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    togglePassword() {
        this.passwordTextVisible = !this.passwordTextVisible;
        this.element.nativeElement.focus();
    }
    setDisabledState(isDisabled) {
        this.disabled = coerceBooleanProperty(isDisabled);
    }
    incrementValue(event) {
        this.increment(event);
        if (!this._spinnerInterval) {
            this._spinnerTimeout = setTimeout(() => {
                this._spinnerInterval = setInterval(() => {
                    this.increment(event);
                }, 50);
            }, 500);
        }
    }
    decrementValue(event) {
        this.decrement(event);
        if (!this._spinnerInterval) {
            this._spinnerTimeout = setTimeout(() => {
                this._spinnerInterval = setInterval(() => {
                    this.decrement(event);
                }, 50);
            }, 500);
        }
    }
    clearSpinnerInterval() {
        clearTimeout(this._spinnerTimeout);
        this._spinnerTimeout = undefined;
        clearInterval(this._spinnerInterval);
        this._spinnerInterval = undefined;
    }
    updateInputType() {
        // eslint-disable-next-line
        this.type$.next(this.passwordTextVisible && InputTypes.password === this.type ? InputTypes.text : this.type);
    }
    increment(event) {
        event.preventDefault();
        if (!this.disabled) {
            const el = this.element.nativeElement;
            const max = +this.max;
            if ((max || max === 0) && +el.value >= max)
                return;
            el.value = el.value ? (+el.value + 1).toString() : '1';
            this.value = el.value;
            this.change.emit(this._value);
            if (document.activeElement !== this.inputControl.nativeElement) {
                this.inputControl.nativeElement.focus();
            }
        }
    }
    decrement(event) {
        event.preventDefault();
        if (!this.disabled) {
            const el = this.element.nativeElement;
            const min = +this.min;
            if (min || min === 0) {
                if (min === 0 && !el.value) {
                    el.value = '0';
                    this.value = el.value;
                    this.change.emit(this._value);
                    this.inputControl.nativeElement.focus();
                    return;
                }
                else if (+el.value <= min) {
                    return;
                }
            }
            el.value = el.value ? (+el.value - 1).toString() : '-1';
            this.value = el.value;
            this.change.emit(this._value);
            if (document.activeElement !== this.inputControl.nativeElement) {
                this.inputControl.nativeElement.focus();
            }
        }
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'ngxInput',
                selector: 'ngx-input',
                template: "<div class=\"ngx-input-wrap\">\n  <div class=\"ngx-input-flex-wrap\">\n    <ng-content select=\"ngx-input-prefix\"></ng-content>\n    <div class=\"ngx-input-flex-wrap-inner\">\n      <div class=\"ngx-input-box-wrap\">\n        <textarea\n          *ngIf=\"type === inputTypes.textarea && autosize\"\n          class=\"ngx-input-textarea\"\n          rows=\"1\"\n          autosize\n          [(ngModel)]=\"value\"\n          [id]=\"id\"\n          [name]=\"name\"\n          [placeholder]=\"placeholder\"\n          [disabled]=\"disabled\"\n          [attr.tabindex]=\"tabindex\"\n          [attr.autocomplete]=\"autocomplete\"\n          [attr.autocorrect]=\"autocorrect\"\n          [attr.spellcheck]=\"spellcheck\"\n          [minlength]=\"minlength\"\n          [maxlength]=\"maxlength\"\n          [required]=\"required\"\n          (change)=\"onChange($event)\"\n          (keyup)=\"onKeyUp($event)\"\n          (focus)=\"onFocus($event)\"\n          (blur)=\"onBlur($event)\"\n          (click)=\"click.emit($event)\"\n          #inputModel=\"ngModel\"\n          #textareaControl\n        >\n        </textarea>\n        <textarea\n          *ngIf=\"type === inputTypes.textarea && !autosize\"\n          class=\"ngx-input-textarea\"\n          rows=\"1\"\n          [(ngModel)]=\"value\"\n          [id]=\"id\"\n          [name]=\"name\"\n          [placeholder]=\"placeholder\"\n          [disabled]=\"disabled\"\n          [attr.tabindex]=\"tabindex\"\n          [attr.autocomplete]=\"autocomplete\"\n          [attr.autocorrect]=\"autocorrect\"\n          [attr.spellcheck]=\"spellcheck\"\n          [minlength]=\"minlength\"\n          [maxlength]=\"maxlength\"\n          [required]=\"required\"\n          (change)=\"onChange($event)\"\n          (keyup)=\"onKeyUp($event)\"\n          (focus)=\"onFocus($event)\"\n          (blur)=\"onBlur($event)\"\n          (click)=\"click.emit($event)\"\n          #inputModel=\"ngModel\"\n          #textareaControl\n        >\n        </textarea>\n        <ng-container *ngTemplateOutlet=\"inputTpl\"></ng-container>\n\n        <div class=\"numeric-spinner\" *ngIf=\"!disabled && (type$ | async) === inputTypes.number\">\n          <i\n            class=\"ngx-icon ngx-chevron-bold-up\"\n            (mousedown)=\"incrementValue($event)\"\n            (mouseup)=\"clearSpinnerInterval()\"\n            (mouseleave)=\"clearSpinnerInterval()\"\n          ></i>\n          <i\n            class=\"ngx-icon ngx-chevron-bold-down\"\n            (mousedown)=\"decrementValue($event)\"\n            (mouseup)=\"clearSpinnerInterval()\"\n            (mouseleave)=\"clearSpinnerInterval()\"\n          ></i>\n        </div>\n        <span\n          *ngIf=\"type === inputTypes.password && passwordToggleEnabled\"\n          class=\"icon-eye\"\n          title=\"Toggle Text Visibility\"\n          (click)=\"togglePassword()\"\n        >\n        </span>\n        <span\n          *ngIf=\"type === inputTypes.text && unlockable && disabled\"\n          class=\"icon-lock\"\n          (click)=\"disabled = false\"\n          ngx-tooltip\n          [tooltipTitle]=\"unlockableTooltip\"\n        >\n        </span>\n      </div>\n      <span class=\"ngx-input-label\" [@labelState]=\"labelState\">\n        <span [innerHTML]=\"label\"></span>&nbsp;\n        <span *ngIf=\"required && requiredIndicator\" [innerHTML]=\"requiredIndicator\"></span>\n      </span>\n    </div>\n    <ng-content select=\"ngx-input-suffix\"></ng-content>\n  </div>\n  <div class=\"ngx-input-underline\">\n    <div class=\"underline-fill\" [@underlineState]=\"underlineState\"></div>\n  </div>\n  <div class=\"ngx-input-hint\">\n    <ng-content select=\"ngx-input-hint\"></ng-content>\n    <span *ngIf=\"hint\" [innerHTML]=\"hint\"></span>\n  </div>\n</div>\n\n<ng-template #inputTpl>\n  <input\n    *ngIf=\"type !== inputTypes.textarea && autosize\"\n    class=\"ngx-input-box\"\n    autoSizeInput\n    [extraWidth]=\"type === inputTypes.number ? 20 : 0\"\n    [minWidth]=\"minWidth\"\n    [includePadding]=\"true\"\n    [(ngModel)]=\"value\"\n    [value]=\"value\"\n    [id]=\"id\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [disabled]=\"disabled\"\n    [type]=\"type$ | async\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [minlength]=\"minlength\"\n    [maxlength]=\"maxlength\"\n    [attr.tabindex]=\"tabindex\"\n    [attr.autocomplete]=\"autocomplete\"\n    [attr.autocorrect]=\"autocorrect\"\n    [attr.spellcheck]=\"spellcheck\"\n    (change)=\"onChange($event)\"\n    (keyup)=\"onKeyUp($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\"\n    (click)=\"click.emit($event)\"\n    [required]=\"required\"\n    #inputModel=\"ngModel\"\n    #inputControl\n  />\n  <input\n    *ngIf=\"type !== inputTypes.textarea && !autosize\"\n    class=\"ngx-input-box\"\n    [(ngModel)]=\"value\"\n    [id]=\"id\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [disabled]=\"disabled\"\n    [type]=\"type$ | async\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [minlength]=\"minlength\"\n    [maxlength]=\"maxlength\"\n    [attr.tabindex]=\"tabindex\"\n    [attr.autocomplete]=\"autocomplete\"\n    [attr.autocorrect]=\"autocorrect\"\n    [attr.spellcheck]=\"spellcheck\"\n    (change)=\"onChange($event)\"\n    (keyup)=\"onKeyUp($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\"\n    (click)=\"click.emit($event)\"\n    [required]=\"required\"\n    #inputModel=\"ngModel\"\n    #inputControl\n  />\n</ng-template>\n",
                host: {
                    class: 'ngx-input',
                    '[class.legacy]': 'appearance === "legacy"',
                    '[class.fill]': 'appearance === "fill"',
                    '[class.sm]': 'size === "sm"',
                    '[class.md]': 'size === "md"',
                    '[class.lg]': 'size === "lg"',
                    '[class.focused]': 'focused',
                    '[class.autosize]': 'autosize',
                    '[class.marginless]': '!withMargin',
                    '[class.no-label]': '!label'
                },
                animations: INPUT_ANIMATIONS,
                providers: [INPUT_VALUE_ACCESSOR, INPUT_VALIDATORS],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["input[type=number],input[type=password],input[type=tel],input[type=text],textarea{display:inline-block;box-sizing:border-box;outline:none}.form-input{background:#313847;border:1px solid #455066;color:#b6b6b6;transition:box-shadow .2s;border-radius:0;font-size:13px;height:32px;line-height:32px;width:100%;padding:6px;margin-bottom:1em}.form-input::-moz-placeholder{color:#647493}.form-input::placeholder{color:#647493}.form-input:focus{box-shadow:0 1px 5px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12)}.form-input[disabled]{cursor:not-allowed;color:#363636}textarea.form-input{min-height:120px;line-height:1.3em}.ngx-input{display:block;max-width:100%;margin-top:16px;margin-bottom:8px;padding-top:calc(.7em + 8px);padding-bottom:0}.ngx-input.marginless{margin-top:0;margin-bottom:0}.ngx-input.no-label{padding-top:0}.ngx-input.md .ngx-input-box,.ngx-input.md .ngx-input-textarea{font-size:18px!important}.ngx-input.lg .ngx-input-box,.ngx-input.lg .ngx-input-textarea{font-size:21px!important}.ngx-input.focused:not(.ng-invalid) .ngx-input-label{color:#1483ff!important}.ngx-input.invalid.ng-touched .ngx-input-underline,.ngx-input.invalid.ng-touched .ngx-input-underline .underline-fill,.ngx-input.ng-invalid.ng-dirty .ngx-input-underline,.ngx-input.ng-invalid.ng-dirty .ngx-input-underline .underline-fill,.ngx-input.ng-invalid.ng-touched .ngx-input-underline,.ngx-input.ng-invalid.ng-touched .ngx-input-underline .underline-fill{background-color:#ff4514!important}.ngx-input.invalid.ng-touched .ngx-input-hint,.ngx-input.invalid.ng-touched .ngx-input-label,.ngx-input.ng-invalid.ng-dirty .ngx-input-hint,.ngx-input.ng-invalid.ng-dirty .ngx-input-label,.ngx-input.ng-invalid.ng-touched .ngx-input-hint,.ngx-input.ng-invalid.ng-touched .ngx-input-label{color:#ff4514}.ngx-input.invalid.ng-touched .ngx-input-box,.ngx-input.invalid.ng-touched .ngx-input-textarea,.ngx-input.ng-invalid.ng-dirty .ngx-input-box,.ngx-input.ng-invalid.ng-dirty .ngx-input-textarea,.ngx-input.ng-invalid.ng-touched .ngx-input-box,.ngx-input.ng-invalid.ng-touched .ngx-input-textarea{caret-color:#ff4514!important}.ngx-input.autosize{display:inline-block}.ngx-input input:-webkit-autofill,.ngx-input input:-webkit-autofill:active,.ngx-input input:-webkit-autofill:focus,.ngx-input input:-webkit-autofill:hover{-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s;-webkit-text-fill-color:#cfcfcf!important}.ngx-input .ngx-input-flex-wrap{display:flex}.ngx-input .ngx-input-flex-wrap .ngx-input-flex-wrap-inner{display:flex;flex:1;max-width:100%}.ngx-input .ngx-input-flex-wrap ngx-input-prefix,.ngx-input .ngx-input-flex-wrap ngx-input-suffix{flex:none;white-space:nowrap;display:flex;align-items:center;justify-content:center}.ngx-input .ngx-input-flex-wrap ngx-input-prefix>*,.ngx-input .ngx-input-flex-wrap ngx-input-suffix>*{display:inline-flex}.ngx-input ngx-input-prefix{margin-right:8px}.ngx-input ngx-input-suffix{margin-left:8px}.ngx-input .ngx-input-wrap{position:relative;display:block;margin-bottom:0;width:100%}.ngx-input .ngx-input-wrap .ngx-input-box-wrap{position:relative;width:100%;display:flex}.ngx-input .ngx-input-wrap .ngx-input-box-wrap:focus{outline:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea{flex:auto;display:block;background:transparent;border:none;margin-bottom:0;padding-left:0;width:100%;max-width:100%;color:#cdd2dd;font-size:1em;line-height:1.25em;min-height:0;font-family:inherit;caret-color:#1483ff}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::-moz-placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::-moz-placeholder{color:#818fa9}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box::placeholder,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea::placeholder{color:#818fa9}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box:focus,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea:focus{box-shadow:none;outline:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box:disabled,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea:disabled{color:#72819f;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box{margin:3px 0}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box[type=number]::-webkit-inner-spin-button{-webkit-appearance:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea{resize:none}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-eye,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-lock{line-height:25px;top:0;bottom:0;position:absolute;right:10px;cursor:pointer;font-size:.8rem;color:#9c9c9c;transition:color .1s}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-eye:hover,.ngx-input .ngx-input-wrap .ngx-input-box-wrap .icon-lock:hover{color:#b6b6b6}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .numeric-spinner{display:flex;z-index:2;opacity:0;position:absolute;right:0;top:50%;transform:translateY(-50%);flex-direction:column;transition:all .1s ease-out}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .numeric-spinner i{font-size:.625rem;color:#909cb4;cursor:pointer}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .numeric-spinner i:hover{color:#cdd2dd}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .numeric-spinner i:active{transform:scale(1.4)}.ngx-input .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box:focus+.numeric-spinner,.ngx-input .ngx-input-wrap .ngx-input-box-wrap:hover .numeric-spinner{opacity:1}.ngx-input .ngx-input-wrap .ngx-input-label{pointer-events:none;position:absolute;font-size:13px;font-weight:600;transition:color .2s ease-in-out;color:#818fa9;white-space:nowrap;max-width:100%;overflow:hidden;text-overflow:ellipsis}.ngx-input .ngx-input-wrap .ngx-input-underline{width:100%;height:1px;background-color:#455066}.ngx-input .ngx-input-wrap .ngx-input-underline .underline-fill{background-color:#1483ff;width:100%;height:2px;margin:0 auto}.ngx-input .ngx-input-wrap .ngx-input-hint{font-size:12px;color:#818fa9;margin-top:2px;min-height:1em;line-height:14px;transition:color .2s ease-in-out}.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap .icon-eye,.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap .icon-lock{line-height:33.33px;z-index:2}.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box,.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap .ngx-input-textarea{margin:0;padding:6px 10px;position:relative;z-index:1}.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap .ngx-input-box+.numeric-spinner{right:10px}.ngx-input.fill .ngx-input-wrap .ngx-input-box-wrap:after{position:absolute;top:0;right:0;bottom:0;left:0;background-color:#0c0e12;mix-blend-mode:exclusion;content:\"\"}"]
            },] }
];
InputComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
InputComponent.propDecorators = {
    id: [{ type: Input }],
    name: [{ type: Input }],
    label: [{ type: Input }],
    hint: [{ type: Input }],
    placeholder: [{ type: Input }],
    tabindex: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    minlength: [{ type: Input }],
    maxlength: [{ type: Input }],
    size: [{ type: Input }],
    appearance: [{ type: Input }],
    withMargin: [{ type: Input }],
    disabled: [{ type: Input }],
    minWidth: [{ type: Input }],
    requiredIndicator: [{ type: Input }],
    required: [{ type: Input }],
    passwordToggleEnabled: [{ type: Input }],
    passwordTextVisible: [{ type: Input }],
    autoSelect: [{ type: Input }],
    autofocus: [{ type: Input }],
    autocomplete: [{ type: Input }],
    autocorrect: [{ type: Input }],
    spellcheck: [{ type: Input }],
    type: [{ type: Input }],
    autosize: [{ type: Input }],
    unlockable: [{ type: Input }],
    unlockableTooltip: [{ type: Input }],
    change: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    keyup: [{ type: Output }],
    click: [{ type: Output }],
    select: [{ type: Output }],
    inputControl: [{ type: ViewChild, args: ['inputControl',] }],
    inputModel: [{ type: ViewChild, args: ['inputModel',] }],
    textareaControl: [{ type: ViewChild, args: ['textareaControl',] }],
    focusedOrDirty: [{ type: HostBinding, args: ['class.ng-dirty',] }],
    isTouched: [{ type: HostBinding, args: ['class.ng-touched',] }]
};
//# sourceMappingURL=data:application/json;base64,